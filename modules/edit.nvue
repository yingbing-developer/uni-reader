<template>
	<view class="toast">
		<view class="mask" ref="mask" @tap="hide('cancel')"></view>
		<view class="popup" ref="popup" :style="{'background-color': skinColor.color_bg_1}" @touchmove.stop.prevent="">
			<text class="title" :style="{color: skinColor.color_1}">编辑内容</text>
			<textarea :adjust-position="false" :show-confirm-bar="false" :style="{'border-color': skinColor.color_gap_1, 'background-color': skinColor.color_read_bg, color: skinColor.color_read_text}" class="editTextarea" v-model="content" />
			<view class="btns">
				<view class="btn" :class="skinMode + '-actived'" @tap="hide('cancel')">
					<text class="btn-text" :style="{color: skinColor.color_1}">取消</text>
				</view>
				<view class="line-gap" :style="{'background-color': skinColor.color_gap_1}"></view>
				<view class="btn" :class="skinMode + '-actived'" @tap="save">
					<text class="btn-text" :style="{color: skinColor.color_1}">保存</text>
				</view>
			</view>
		</view>
		<view :style="{height: keyboardHeight + 'px'}"></view>
	</view>
</template>

<script>
	const animation = weex.requireModule('animation');
	import appMixin from '@/common/mixin/app.js'
	export default {
		mixins: [appMixin],
		data() {
			return {
				isShow: false,
				content: '',
				start: 0,
				end: 0,
				keyboardHeight: 0,
				anima: {
					duration: 300,
					scale: 1,
					opac: 1
				}
			}
		},
		beforeCreate () {
			uni.onKeyboardHeightChange(res => {
			   this.keyboardHeight = res.height;
			})
		},
		onLoad (data) {
			uni.$emit('musicBtn-down');
			this.content = decodeURIComponent(data.content);
			this.start = data.start;
			this.end = data.end;
			setTimeout(() => {
				this.show();
			}, 200)
		},
		methods: {
			show() {
				animation.transition(this.$refs.mask, {
					styles: {
						opacity: this.anima.opac
					},
					duration: this.anima.duration, //ms
					timingFunction: 'ease',
					needLayout: false,
					delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
					styles: {
						transform: `scale(${this.anima.scale})`,
						opacity: this.anima.opac
					},
					duration: this.anima.duration, //ms
					timingFunction: 'ease',
					needLayout: false,
					delay: 0 //ms
				})
			},
			hide (flag) {
				animation.transition(this.$refs.mask, {
					styles: {
						opacity: 0
					},
					duration: this.anima.duration, //ms
					timingFunction: 'ease',
					needLayout: false,
					delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
					styles: {
						transform: 'scale(1.2)',
						opacity: 0
					},
					duration: this.anima.duration, //ms
					timingFunction: 'ease',
					needLayout: false,
					delay: 0 //ms
				}, (res) => {
					if ( flag == 'cancel' ) {
						uni.$emit('edit-btn', {
							flag: 'cancel'
						})
					} else {
						uni.$emit('edit-btn', {
							flag: 'confirm',
							content: this.content,
							start: this.start,
							end: this.end
						})
					}
				})
			},
			save () {
				getApp().globalData.$dom.confirm('操作提示', '确认保存修改的内容吗？').then((res) => {
					if ( res == 'confirm' ) {
						this.hide('confirm');
					}
				})
			}
		},
		beforeDestroy () {
			uni.$emit('musicBtn-open');
			uni.offKeyboardHeightChange(res => {
				console.log(res);
			});
		},
		onBackPress (event) {
			if ( event.from == 'backbutton' ) {
				this.hide('cancel');
				return true;
			}
			return false;
		}
	}
</script>

<style scoped>
	.toast {
		position: relative;
		flex: 1;
	}

	.mask {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.4);
		opacity: 0;
	}

	.popup {
		margin: 60rpx 40rpx;
		flex: 1;
		transform: scale(1.2);
		opacity: 0;
	}

	.editTextarea {
		flex: 1;
		padding: 20rpx;
		border: 1px solid;
	}

	.title {
		align-items: center;
		padding: 15rpx;
		font-size: 28rpx;
	}

	.btns {
		flex-direction: row;
	}

	.line-gap {
		width: 1px;
	}

	.btn {
		flex: 1;
		padding: 35rpx 0;
		align-items: center;
	}

	.btn-text {
		font-size: 35rpx;
	}
</style>
