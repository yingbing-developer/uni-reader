<template>
	<view class="toast" @touchmove.stop.prevent="">
		<view class="mask" ref="mask" @tap="hide('cancel')"></view>
		<view class="popup" ref="popup" @touchmove.stop.prevent="" :style="{'background-color': skinColor.menuBgColor}">
			<view class="title">
				<text class="title-text" :style="{'color': skinColor.menuTitleColor}" v-if="title">{{title}}</text>
			</view>
			<view class="message" :style="{'border-bottom-color': skinColor.gapColor}">
				<text class="msg-text color-title" :style="{'color': skinColor.menuTitleColor}">{{message}}</text>
			</view>
			<view class="btns">
				<view class="btn btn-confirm" :class="skinColor.activedName" @tap="hide('confirm')">
					<text class="btn-text color-red">确认</text>
				</view>
				<view class="line-gap" :style="{'background-color': skinColor.gapColor}"></view>
				<view class="btn btn-cancel" :class="skinColor.activedName" @tap="hide('cancel')">
					<text :style="{'color': skinColor.menuTitleColor}" class="btn-text code-text">取消</text>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	const animation = weex.requireModule('animation');
	import { skinMixin } from '@/common/mixin/index.js'
	export default {
		mixins: [skinMixin],
		data () {
			return {
				title: '',
				message: '',
				anima: {
					duration: 300,
					scale: 1,
					opac: 1
				}
			}
		},
		onLoad (data) {
			uni.$emit('musicBtn-down');
			this.title = data.title;
			this.message = decodeURIComponent(data.message);
		},
		onReady() {
			this.show();
		},
		methods: {
			show () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: this.anima.opac
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: `scale(${this.anima.scale})`,
						opacity: this.anima.opac
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
			},
			hide (flag) {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: 0
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: 'scale(1.2)',
						opacity: 0
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, (res) => {
					uni.$emit('message-btn', {
						flag: flag
					})
				})
			}
		},
		beforeDestroy () {
			uni.$emit('musicBtn-open');
		},
		onBackPress(event) {
			if ( event.from == 'backbutton' ) {
				this.hide('cancel');
				return true;
			}
			return false
		}
	}
</script>

<style scoped>
	.toast {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		align-items: center;
		justify-content: center;
	}
	.mask {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0,0,0,0.4);
		opacity: 0;
	}
	.popup {
		width: 650rpx;
		border-radius: 30rpx;
		transform: scale(1.2);
		background-color: #FFFFFF;
		opacity: 0;
	}
	.title {
		align-items: center;
		padding: 30rpx 0;
	}
	.title-text {
		font-size: 30rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.message {
		align-items: center;
		border-bottom-width: 1px;
		border-bottom-color: #EEEEEE;
		padding: 50rpx 0 40rpx 0;
	}
	.msg-text {
		font-size: 35rpx;
		padding: 0 20rpx;
	}
	.btns {
		flex-direction: row;
	}
	.line-gap {
		width: 1px;
		background-color: #EEEEEE;
	}
	.btn {
		flex: 1;
		padding: 35rpx 0;
		align-items: center;
	}
	.btn:active {
		background-color: #eee;
	}
	.btn-text {
		font-size: 30rpx;
	}
	.btn-confirm {
		border-bottom-left-radius: 30rpx;
	}
	.btn-cancel {
		border-bottom-right-radius: 30rpx;
	}
</style>
