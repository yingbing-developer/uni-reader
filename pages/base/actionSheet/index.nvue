<template>
	<view class="action" @touchmove="moveEnable">
		<view class="mask" ref="mask" @tap="hide('cancel')"></view>
		<view class="popup" ref="popup" :style="{transform: 'translateY(' + Math.abs(lateY) + 'px)'}">
			<view class="item-box" :style="{'background-color': skinColor.menuBgColor}">
				<view v-for="(item, index) in list" :key="index" @tap="hide(item.value)">
					<view class="list">
						<text class="list-text" :style="{'color': skinColor.menuTitleColor}">{{item.title}}</text>
					</view>
					<view :style="{height: '1.5rpx', 'background-color': skinColor.gapColor}" v-if="index < list.length - 1"></view>
				</view>
			</view>
			<view :style="{height: '15rpx'}"></view>
			<view class="list item-box" :style="{'background-color': skinColor.menuBgColor}" @tap="hide('cancel')">
				<text class="list-text" :style="{'color': skinColor.menuTitleColor}">取消</text>
			</view>
			<view :style="{height: '15rpx'}"></view>
		</view>
	</view>
</template>

<script>
	const animation = weex.requireModule('animation');
	import { skinMixin } from '@/common/mixin/index.js'
	export default {
		mixins: [skinMixin],
		data () {
			return {
				list: [],
				anima: {
					opac: 0.4,
					duration: 200
				}
			}
		},
		computed: {
			lateY () {
				return -(this.list.length * 60 + 60);
			}
		},
		beforeCreate () {
			uni.$emit('musicBtn-hide');
		},
		onLoad (data) {
			this.list = JSON.parse(decodeURIComponent(data.list))
		},
		onReady () {
			this.show();
		},
		methods: {
			moveEnable () {
				return true;
			},
			show () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: this.anima.opac
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: 'translateY(0)'
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
			},
			hide (flag) {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: 0
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: 'translateY(' + Math.abs(this.lateY) + 'px)'
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, (res) => {
					uni.$emit('actionSheet-btn', {
						flag: flag
					});
				})
			}
		},
		onBackPress(event) {
			if ( event.from == 'backbutton' ) {
				this.hide('cancel');
				return true;
			}
			return false
		},
		beforeDestroy() {
			uni.$off('actionSheet-info');
			uni.$emit('musicBtn-show');
		}
	}
</script>

<style scoped>
	.action {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.mask {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #000000;
		opacity: 0;
	}
	.popup {
		position: absolute;
		left: 10rpx;
		right: 10rpx;
		bottom: 0;
	}
	.item-box {
		border-radius: 20rpx;
	}
	.list {
		height: 90rpx;
		align-items: center;
		justify-content: center;
	}
	.list-text {
		font-size: 27rpx;
	}
</style>
