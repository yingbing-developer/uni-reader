<template>
    <div class="catalog" :style="{'background-color': skinColor.menuBgColor}" @touchmove.stop.prevent="">
		<view class="title">
			<text class="title-text">{{title}}目录</text>
		</view>
		<view class="line" :style="{'background-color': skinColor.gapColor}">
			<text class="line-text" :style="{color: skinColor.titleColor}">共{{list.length}}个{{title}}</text>
			<text class="clear" v-if="showClear" @tap="clear">清空</text>
		</view>
		<list v-if="list.length > 0">
			<cell v-for="(item, index) in list" :key='item.index' >
				<view class="actived" @click="clickItem(index)" ref="list">
					<list-item :item="item" :color="scrollTo == index ? '#DD524D' : skinColor.menuTitleColor"></list-item>
				</view>
			</cell>
		</list>
		<view class="nodata-view" v-else>
			<text class="nodata" :style="{color: skinColor.menuTitleColor}">暂无{{title}}目录</text>
		</view>
    </div>
</template>

<script>
	import ListItem from './list-item.nvue'
	import { skinMixin } from '@/common/mixin/index.js';
	import { mapGetters, mapMutations } from 'vuex'
	const dom = weex.requireModule('dom')
    export default {
		mixins: [skinMixin],
		data() {
			return {
				list: [],
				title: '',
				path: '',
				showClear: false
			}
		},
		computed: {
			...mapGetters(['bookList']),
			bookInfo () {
				return this.bookList[getApp().globalData.$utils.indexOf(this.bookList, 'path', this.path)];
			},
			scrollTo () {
				let len = this.list.length;
				if ( this.title == '章节' ) {
					for ( let i = 0; i < len; i++ ) {
						if ( i < this.list.length - 1 ) {
							if ( this.bookInfo.record >= this.list[i].index && this.bookInfo.record < this.list[parseInt(i) + 1].index ) {
								return i
							}
						} else {
							if ( this.bookInfo.record >= this.list[i].index) {
								return i
							}
						}
					}
				} 
				if ( this.title == '书签' ) {
					for ( let i = 0; i < len; i++ ) {
						if ( this.bookInfo.record == this.list[i].index ) {
							return i
						}
					}
				}
				
			}
		},
		beforeCreate() {
			uni.$on('page-popup', (data) => {
			    this.list = data.list;
				this.title = data.title;
				this.path = data.path;
				this.showClear = data.showClear || false
				if ( this.list.length > 0 ) {
					setTimeout(() => {
						dom.scrollToElement(this.$refs['list'][this.scrollTo], {animated: false});
					}, 50);
				}
			})  
		},
		beforeDestroy () {
			uni.$off('page-popup');
		},
        methods: {
			...mapMutations(['updateBookRecord']),
			clickItem (index) {
				this.updateBookRecord({
					path: this.path,
					record: this.list[index].index
				});
				dom.scrollToElement(this.$refs['list'][index], {animated: false});
			},
			clear () {
				uni.$emit('setting', {
					type: 'clearMark'
				});
			}
        },
		components: {
			ListItem
		}
    }
</script>

<style scoped>
	.catalog {
		width: 500rpx;
		position: fixed;
		right: 0;
		top: 0;
		flex: 1;
	}
	.title {
		padding: 40rpx 0;
		align-items: center;
	}
	.title-text {
		font-size: 32rpx;
		color: #DD524D;
	}
	.line {
		padding: 20rpx 30rpx;
		flex-direction: row;
		justify-content: space-between;
	}
	.line-text {
		font-size: 25rpx;
	}
	.clear {
		color: #DD524D;
		font-size: 25rpx;
	}
	.nodata-view {
		flex: 1;
		align-items: center;
		justify-content: center;
	}
	.nodata {
		font-size: 28rpx;
	}
</style>