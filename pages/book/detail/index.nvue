<template>
	<view class="detail" :style="{'background-color': skinColor.bgColor}">
		<nav-bar title="小说详情" :bgColor="skinColor.navColor" :titleColor="skinColor.iconColor"></nav-bar>
		<view class="book-info">
			<c-image class="book-img" :src="bookInfo.image" mode="aspectFill"></c-image>
			<view class="book-info-right">
				<text class="book-name" :style="{'color': skinColor.titleColor}">{{bookInfo.name}}</text>
				<text class="book-intro-title" :style="{'color': skinColor.menuTitleColor}">作者：{{bookInfo.source == 'local' ? '佚名' : author}}</text>
				<view class="book-intro">
					<text class="book-intro-title" :style="{'color': skinColor.titleColor}">内容简介</text>
					<text class="book-intro-text" :style="{'color': skinColor.menuTitleColor}">{{bookInfo.source == 'local' ? '暂无介绍' : desc}}</text>
				</view>
			</view>
		</view>
		<view class="btns">
			<view class="old-btn btn" @tap="readRecord">
				<text class="btn-text" :style="{'color': skinColor.bgColor}">{{readed ? '上次读到 ' + record.title : '未阅读'}}</text>
			</view>
			<view class="new-btn btn" @tap="startRead">
				<text class="btn-text new-btn-text">开始阅读</text>
			</view>
		</view>
		
		<view class="tabs">
			<view class="tab" @tap="tabIndex = 0">
				<text class="tab-text" :class="{'tab-actived': tabIndex == 0}" :style="{'color': tabIndex == 0 ? '#21C088' : skinColor.titleColor}">简介</text>
			</view>
			<view class="tab" @tap="tabIndex = 1">
				<text class="tab-text" :class="{'tab-actived': tabIndex == 1}" :style="{'color': tabIndex == 1 ? '#21C088' : skinColor.titleColor}">章节</text>
			</view>
		</view>
		<swiper class="swiper" :duration="500" :current="tabIndex" @change="currentChange" >
			<swiper-item>
				<scroll-view scroll-y class="book-desc">
					<text class="book-desc-text" :style="{'color': skinColor.menuTitleColor, 'border-color': skinColor.gapColor, 'background-color': skinColor.gapColor}">{{bookInfo.source == 'local' ? '暂无介绍' : desc}}</text>
				</scroll-view>
			</swiper-item>
			<swiper-item>
				<view class="catalog-line">
					<text class="catalog-title" :style="{'color': skinColor.titleColor}">小说章节</text>
					<text class="sort-title" @tap="changeSortType">{{sortType == 'reverse' ? '倒序' : '正序'}}</text>
				</view>
				<!-- 章节列表 -->
				<list-scroll :line-height="110" :list="catalog" :bounce="false" v-if="showList">
					<no-data slot="fixed" v-if="catalog.length <= 0" title="貌似没有章节哦"></no-data>
					<template v-slot="{item}">
						<view class="catalog-list">
							<view class="catalog-block" :class="skinColor.activedName" :style="{'background-color': item.path == readed.path ? skinColor.gapColor : '', 'border-color': skinColor.gapColor}" @tap="readBook(item.path)">
								<text class="catalog-text" :style="{'color': skinColor.menuTitleColor}">{{item.title}}</text>
								<text class="readed-text color-red" v-if="item.path == readed.path">阅读中</text>
							</view>
						</view>
					</template>
				</list-scroll>
			</swiper-item>
		</swiper>
		
	</view>
</template>

<script>
	import CImage from '@/components/c-image/c-image.nvue'
	import ListScroll from '@/components/list-scroll/list-scroll.nvue'
	import { skinMixin } from '@/common/mixin/index.js'
	import bookMixin from '@/common/mixin/book.js';
	import { getBookInfo } from '@/common/online/getBook.js'
	export default {
		mixins: [skinMixin, bookMixin],
		data () {
			return {
				catalog: [],
				author: '',
				desc: '',
				tabIndex: 0,
				showList: false,
				sortType: 'reverse'
			}
		},
		computed: {
			//书籍信息
			bookInfo () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				let index =  page.options.index;
				return this.bookList[index];
			},
			record () {
				return this.bookInfo.record;
			},
			//上次阅读章节
			readed () {
				let arr = getApp().globalData.$utils.deepClone(this.catalog);
				if ( this.sortType == 'reverse' ) {
					arr.reverse();
				}
				let index = getApp().globalData.$utils.indexOf(arr, 'chapter', this.record.chapter);
				return index > -1 ? arr[index] : false;
			}
		},
		onReady () {
			if ( this.bookInfo.source == 'local' ) {
				// this.getLocalComicCatalog()
			} else {
				this.getDetail({
					source: this.bookInfo.source,
					href: this.bookInfo.path
				})
				
			}
		},
		methods: {
			//获取小说详情信息
			getDetail (obj) {
				uni.showLoading({
					title: '解析中',
					mask: true
				})
				getBookInfo(obj).then((res) => {
					uni.hideLoading();
					if ( res.code == 200 ) {
						let data = res.data.data;
						this.author = data.author;
						this.desc = data.desc;
						//如果名字发生更改，则更新本地记录的名称
						if ( data.name != this.bookInfo.name ) {
							this.updateBookInfo({
								path: this.bookInfo.path,
								name: data.name
							})
						}
						//如果图片更改，则更新本地记录的图片
						if ( data.cover != this.bookInfo.image && data.cover ) {
							this.updateBookInfo({
								path: this.bookInfo.path,
								image: data.cover
							})
						}
						this.catalog = data.chapters;
					}
				}).catch((err) => {
					uni.showToast({
						title: '解析失败',
						icon: 'none'
					})
				})
			},
			//开始阅读
			startRead () {
				let arr = getApp().globalData.$utils.deepClone(this.catalog);
				let chapters = this.sortType == 'reverse' ? arr.reverse() : arr;
				this.readBook(chapters[0].path);
			},
			//从上次位置开始阅读
			readRecord () {
				if ( this.readed ) {
					this.readBook(this.readed.path);
				} else {
					this.startRead();
				}
			},
			//阅读
			readBook (path) {
				let arr = getApp().globalData.$utils.deepClone(this.catalog);
				let nums = this.sortType == 'reverse' ? JSON.stringify(arr.reverse()) : JSON.stringify(arr);
				let readIndex = getApp().globalData.$utils.indexOf(arr, 'path', path);
				//更新阅读章节记录
				let record = {
					chapter: arr[readIndex].chapter,
					position: this.record.chapter == arr[readIndex].chapter ? this.record.position : 0,
					title: arr[readIndex].title
				}
				this.updateBookInfo({
					path: this.bookInfo.path,
					record: record
				})
				let index = getApp().globalData.$utils.indexOf(this.bookList, 'path', this.bookInfo.path);
				getApp().globalData.$Router.push({
					path: '/pages/book/read/index',
					query: {
						index: index,
						nums: encodeURIComponent(nums),
						readIndex: readIndex
					}
				});
			},
			//改变排序方式
			changeSortType () {
				this.sortType = this.sortType == 'reverse' ? 'positive' : 'reverse';
				this.catalog.reverse();
			},
			currentChange (e) {
				this.tabIndex = e.detail.current;
				if ( this.tabIndex == 1 && !this.showList ) {
					this.showList = true;
				}
			}
		},
		components: {
			CImage,
			ListScroll
		}
	}
</script>

<style scoped>
	.book-info {
		flex-direction: row;
		padding: 20rpx;
	}
	.book-img {
		width: 200rpx;
		height: 240rpx;
	}
	.book-info-right {
		flex: 1;
		padding: 0 15rpx;
	}
	.book-name {
		font-size: 30rpx;
		font-weight: bold;
		lines: 1;
		text-overflow: ellipsis;
		margin: 20rpx 0;
	}
	.book-intro {
		margin-top: 20rpx;
	}
	.book-intro-title {
		font-size: 24rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.book-intro-text {
		margin-top: 10rpx;
		font-size: 20rpx;
		lines: 3;
		text-overflow: ellipsis;
	}
	.btns {
		flex-direction: row;
		justify-content: space-between;
		padding: 0 20rpx;
	}
	.btn {
		flex: 1;
		height: 75rpx;
		justify-content: center;
		align-items: center;
		border-radius: 5rpx;
		border-color: #21C088;
		border-style: solid;
		border-width: 1px;
	}
	.btn-text {
		font-size: 30rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.new-btn {
		margin-left: 10rpx;
	}
	.new-btn-text {
		color: #21C088;
	}
	.old-btn {
		margin-right: 10rpx;
		background-color: #21C088;
	}
	.tabs {
		flex-direction: row;
		padding: 20rpx;
	}
	.tab {
		margin-right: 30rpx;
	}
	.tab-text {
		text-align: center;
		font-size: 32rpx;
	}
	.tab-actived {
		text-decoration: underline;
	}
	.swiper {
		flex: 1;
	}
	.book-desc {
		padding: 20rpx;
		flex: 1;
	}
	.book-desc-text {
		padding: 20rpx;
		font-size: 28rpx;
		border: 1px solid;
	}
	.catalog-line {
		padding: 20rpx 20rpx;
		flex-direction: row;
		justify-content: space-between;
	}
	.catalog-title {
		font-size: 28rpx;
		font-weight: bold;
		color: #333333;
	}
	.sort-title {
		color: #DD524D;
		font-size: 28rpx;
	}
	.catalog-list {
		height: 110rpx;
		justify-content: center;
	}
	.catalog-block {
		margin: 0 30rpx;
		padding: 20rpx;
		height: 80rpx;
		border-width: 1px;
		border-radius: 5rpx;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}
	.catalog-text {
		font-size: 24rpx;
		lines: 1;
		text-overflow: ellipsis;
		flex: 1;
	}
	.readed-text {
		font-size: 24rpx;
	}
</style>
