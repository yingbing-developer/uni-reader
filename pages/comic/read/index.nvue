<template>
	<view class="read" :style="{'background-color': skinColor.bgColor}">
		<list @scroll="scroll">
			<header>
				<gap-bar color="rgba(0,0,0,0.5)"></gap-bar>
			</header>
			
			<!-- 利用appear通用事件，来判断列表是否触顶 -->
			<cell><view style="height: 1px;" @appear="prevShow = true" @disappear="prevShow = false" v-if="comicSync.length"></view></cell>
			
			<cell v-for="(item, index) in comicSync" :key="index" @appear="appear(index)" @disappear="disappear(index)">
				<view class="comic-box" ref="comicBox" :style="{'border-color': skinColor.gapColor}" @tap="preview(item.path)">
					<c-image :enable-mask="false" enable-hidden class="comic-image" lazy-load :style="{height: (windowWidth / item.imageWidth * item.imageHeight) + 'px'}" :src="item.path" mode="aspectFit"></c-image>
				</view>
			</cell>
			
			<!-- 利用appear通用事件，来判断列表是否触底 -->
			<cell><view style="height: 1px;" @appear="nextShow = true" @disappear="nextShow = false" v-if="comicSync.length"></view></cell>
			
		</list>
		<view class="touch-box">
			<view class="menu" @tap="showSetting">
				<text class="menu-text">菜单</text>
			</view>
		</view>
		
		<view class="chapter-box next-chapter" v-if="nextShow" @tap="changeChapter(1)">
			<text class="chapter-text">后面没有了，点击前往下一话</text>
		</view>
		<view class="chapter-box prev-chapter" v-if="prevShow" @tap="changeChapter(-1)">
			<text class="chapter-text">前没有了，点击前往上一话</text>
		</view>
		
		<comic-setting ref="comicSetting" :path="comicInfo.path" :comicSync="comicSync" :actNum="nowIndex"></comic-setting>
	</view>
</template>

<script>
	import { mapGetters, mapMutations } from 'vuex'
	import { skinMixin } from '@/common/mixin/index.js'
	import { indexOf, cnnumtonum } from '@/common/js/util.js'
	import ComicSetting from '../setting/index.nvue'
	import CImage from '@/components/c-image/c-image.nvue'
	import GapBar from '@/components/gap-bar/gap-bar.nvue'
	const dom = weex.requireModule('dom');
	const GetComicContent = plus.android.importClass('com.itstudy.io.GetComicContent');
	const suffixs = 'jpg,png,gif,JPG,PNG,GIF';
	const options = 'name,path';
	export default {
		mixins: [skinMixin],
		computed: {
			...mapGetters(['bookList', 'comicOrienMode']),
			//书籍信息
			comicInfo () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				let index =  page.options.index;
				return this.bookList[index];
			},
			//章节 第几话
			chapter () {
				return parseFloat(this.comicInfo.record.split('-')[0]);
			},
			//章节第几张图
			pNum () {
				return parseFloat(this.comicInfo.record.split('-')[1]);
			},
			//屏幕方向
			comicOrien () {
				return this.comicOrienMode;
			}
		},
		data () {
			return {
				comic: [1,2,3,4,5,6,5],
				comicSync: [],
				nowIndex: 0,
				//屏幕宽度，用于计算图片的高度
				windowWidth: 0,
				direction: 'up',
				nextShow: false,
				prevShow: false
			}
		},
		onLoad () {
			uni.$emit('musicBtn-hide');
			this.changeOrien();
		},
		onReady () {
			//更新阅读时间
			this.updateBookReadTime(this.comicInfo.path);
			setTimeout(async () => {
				this.windowWidth = await this.getSystemWidth();
				this.getComicSync();
				setTimeout(() => {
					this.upComicLength();
				}, 10)
			}, 300)
		},
		methods: {
			...mapMutations(['updateBookLength', 'updateBookRecord', 'updateBookReadStatus', 'updateBookReadTime']),
			//读取漫画内容
			async getComicSync () {
				uni.showLoading({
					title: '读取中..'
				})
				
				//正式用
				let getComicContent = new GetComicContent();
				let comicStr = getComicContent.getContent(this.comicInfo.path, this.chapter);
				this.comicSync = JSON.parse(JSON.parse(JSON.stringify(comicStr)));
				
				//调试用
				// let arr = [];
				// let fd = plus.android.newObject("java.io.File", this.comicInfo.path);
				// let list = plus.android.invoke(fd, "listFiles");
				// if ( plus.android.invoke(list[this.chapter], "isDirectory") ) {
				// 	let childList = plus.android.invoke(list[this.chapter], "listFiles")
				// 	let len = childList.length;
				// 	for ( let i = 0; i < len; i++ ) {
				// 		let path = plus.android.invoke(childList[i], "getPath");
				// 		arr.push({
				// 			path: path,
				// 			name: plus.android.invoke(childList[i], "getName"),
				// 			height: await this.countImageHeight(path) + 'px'
				// 		})
				// 	}
				// } else {
				// 	let len = list.length;
				// 	for ( let i = 0; i < len; i++ ) {
				// 		let path = plus.android.invoke(list[i], "getPath");
				// 		arr.push({
				// 			path: path,
				// 			name: plus.android.invoke(list[i], "getName"),
				// 			height: await this.countImageHeight(path) + 'px'
				// 		})
				// 	}
				// }
				// arr.sort((a, b) => {
				// 	return cnnumtonum(a.name) - cnnumtonum(b.name);
				// })
				// this.comicSync = arr;
				
				setTimeout(() => {
					this.scrollTo();
				}, 50)
				uni.hideLoading();
			},
			//更新漫画章节数
			upComicLength () {
				let fd = plus.android.newObject("java.io.File", this.comicInfo.path);
				let list = plus.android.invoke(fd, "listFiles");
				let length = 0;
				let len = list.length;
				for ( let i = 0; i < len; i++ ) {
					if ( plus.android.invoke(list[i], "isDirectory") ) {
						length += 1;
					}
				}
				this.updateBookLength({
					path: this.comicInfo.path,
					length: length == 0 && list.length > 0 ? 1 : length
				})
			},
			//计算图片高度 (nvue的bug,image组件的widthFix无效,无法自适应高度)
			countImageHeight (imagePath) {
				return new Promise((resolve, reject) => {
					uni.getImageInfo({
						src: 'file://' + imagePath,
						success: (image) => {
							let power = this.windowWidth / image.width;
							resolve(image.height * power);
						}
					});
				})
			},
			//预览图片
			preview (path) {
				let index = indexOf(this.comicSync, path, 'path');
				let imgs = [];
				for ( let i = 0 ; i < this.comicSync.length; i++ ) {
					imgs.push('file://' + this.comicSync[i].path);
				}
				uni.previewImage({
					current: index,
					urls: imgs
				});
			},
			//打开设置窗口
			showSetting () {
				this.$refs.comicSetting.show();
			},
			//滚动到指定的图片位置
			scrollTo () {
				this.nowIndex = this.pNum;
				dom.scrollToElement(this.$refs.comicBox[this.pNum], {animated: false});
			},
			scroll (e) {
				//向上滑动时
				if ( e.contentOffset.y < this.oldOffsetY ) {
					this.direction = 'up';
				} else {
					//向下滑动时
					this.direction = 'under';
				}
				//如果列表y轴偏移为0
				if ( e.contentOffset.y == 0 ) {
					this.nowIndex = 0;
				}
				this.oldOffsetY = e.contentOffset.y;
			},
			appear (index) {
				if ( this.direction == 'under' ) {
					this.nowIndex = index;
				}
			},
			disappear (index) {
				if ( this.direction == 'up' ) {
					this.nowIndex = index + 1;
				}
			},
			//前往上/下章节
			changeChapter (value) {
				if ( this.chapter == 0 && value < 0 ) {
					uni.showToast({
						title: '已经是第一话了',
						icon: 'none'
					})
					return;
				}
				if ( this.chapter == this.comicInfo.length - 1 && value > 0 ) {
					uni.showToast({
						title: '已经是最后一话了',
						icon: 'none'
					})
					return;
				}
				let chapter = this.chapter + value;
				this.upChapter(chapter);
			},
			//更新章节
			upChapter (chapter) {
				let record = chapter + '-0';
				this.updateBookRecord({
					path: this.comicInfo.path,
					record: record
				})
			},
			//获取屏幕宽度
			getSystemWidth () {
				return new Promise((resolve) => {
					uni.getSystemInfo({
						success: (res) => {
							resolve(res.safeArea.width)
						}
					})
				})
			},
			//改变屏幕方向
			changeOrien () {
				plus.screen.lockOrientation(this.comicOrien + '-primary');
			}
		},
		watch: {
			pNum () {
				this.scrollTo();
			},
			chapter (newVal) {
				this.getComicSync();
			},
			comicOrien () {
				this.changeOrien()
			}
		},
		beforeDestroy() {
			uni.$emit('musicBtn-show');
		},
		onResize () {
			//重新计算屏幕宽度和图片高度
			setTimeout(async () => {
				this.windowWidth = await this.getSystemWidth();
			}, 100)
		},
		onBackPress(event) {
			if ( event.from == 'backbutton' ) {
				if ( this.$refs.comicSetting.isShow ) {
					this.$refs.comicSetting.hide();
					return true;
				}
			}
			let size = plus.screen.getCurrentSize();
			//横屏
			if ( size.width > size.height ) {
				//退出前锁定为竖屏
				plus.screen.lockOrientation('portrait-primary');
			}
			//退出前更新本章节的阅读位置
			this.updateBookRecord({
				path: this.comicInfo.path,
				record: this.chapter + '-' + this.nowIndex
			})
			//退出前判断有没有读完漫画
			if ( this.nextShow ) {
				this.updateBookReadStatus({
					path: this.comicInfo.path,
					isReaded: this.chapter + 1 >= this.comicInfo.length
				})
			} else {
				this.updateBookReadStatus({
					path: this.comicInfo.path,
					isReaded: false
				})
			}
			return false;
		},
		components: {
			ComicSetting,
			CImage,
			GapBar
		}
	}
</script>

<style scoped>
	.comic-box {
		border-bottom-width: 1px;
	}
	/* .comic-image {
		width: 750rpx;
	} */
	.touch-box {
		justify-content: center;
		align-items: center;
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.menu {
		width: 200rpx;
		height: 200rpx;
		border-style: dashed;
		border-color: #FFFFFF;
		border-width: 5rpx;
		border-radius: 10rpx;
		align-items: center;
		justify-content: center;
		background-color: rgba(255,255,255,0.5);
		opacity: 0;
	}
	.menu-text {
		font-size: 40rpx;
	}
	.chapter-box {
		position: fixed;
		top: 50rpx;
		bottom: 50rpx;
		width: 70rpx;
		background-color: rgba(76,217,100,0.8);
		align-items: center;
		justify-content: center;
	}
	.prev-chapter {
		left: 0;
		border-top-right-radius: 50rpx;
		border-bottom-right-radius: 50rpx;
	}
	.next-chapter {
		right: 0;
		border-top-left-radius: 50rpx;
		border-bottom-left-radius: 50rpx;
	}
	.chapter-text {
		font-size: 40rpx;
		color: #FFFFFF;
		text-align: center;
	}
</style>
