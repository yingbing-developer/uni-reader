<template>
	<view class="read" :style="{'background-color': skinColor.bgColor}">
		<gap-bar :color="skinColor.navColor"></gap-bar>
		<list @scroll="scroll">
			<!-- 利用appear通用事件，来判断列表是否触顶 -->
			<cell><view style="height: 1px;" @appear="prevShow = true" @disappear="prevShow = false" v-if="comicSync.length"></view></cell>
			
			<cell v-for="(item, index) in comicSync" :key="index" @appear="appear(index)" @disappear="disappear(index)">
				<view class="comic-box" ref="comicBox" :style="{'border-color': skinColor.gapColor}" @longpress="preview(item.path)">
					<!-- <c-image :enable-mask="false" :enable-hidden="comicInfo.source == 'local' ? true : false" class="comic-image" lazy-load :style="{height: (windowWidth / item.imageWidth * item.imageHeight) + 'px'}" :src="item.path" mode="widthFix"></c-image> -->
					<c-image :enable-mask="false" :enable-hidden="comicInfo.source == 'local' ? true : false" class="comic-image" :windowWidth="windowWidth" lazy-load :src="item.path" mode="widthFix"></c-image>
				</view>
			</cell>
			
			<!-- 利用appear通用事件，来判断列表是否触底 -->
			<cell><view style="height: 1px;" @appear="nextShow = true" @disappear="nextShow = false" v-if="comicSync.length"></view></cell>
			
		</list>
		<view class="touch-box">
			<view class="menu" @tap="showSetting">
				<text class="menu-text">菜单</text>
			</view>
		</view>
		
		<view class="chapter-box next-chapter" v-if="nextShow" @tap="changeChapter(1)">
			<text class="chapter-text">后面没有了，点击前往下一话</text>
		</view>
		<view class="chapter-box prev-chapter" v-if="prevShow" @tap="changeChapter(-1)">
			<text class="chapter-text">前没有了，点击前往上一话</text>
		</view>
		
		<comic-setting ref="comicSetting" :chapters="chapters" :path="comicInfo.path" :comicSync="comicSync" :actNum="nowIndex"></comic-setting>
	</view>
</template>

<script>
	import { mapGetters, mapMutations } from 'vuex'
	import { skinMixin } from '@/common/mixin/index.js'
	import { indexOf, cnnumtonum } from '@/common/js/util.js'
	import ComicSetting from '../setting/index.nvue'
	import CImage from '@/components/c-image/c-image.nvue'
	import GapBar from '@/components/gap-bar/gap-bar.nvue'
	const dom = weex.requireModule('dom');
	const GetComicContent = plus.android.importClass('com.itstudy.io.GetComicContent');
	const main = plus.android.runtimeMainActivity();
	const Intent = plus.android.importClass("android.content.Intent");
	const Uri = plus.android.importClass("android.net.Uri");
	const suffixs = 'jpg,png,gif,JPG,PNG,GIF';
	const options = 'name,path';
	export default {
		mixins: [skinMixin],
		computed: {
			...mapGetters(['bookList', 'comicOrienMode']),
			//书籍信息
			comicInfo () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				let index =  page.options.index;
				return this.bookList[index];
			},
			//全部章节
			chapters () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				return JSON.parse(decodeURIComponent(page.options.nums));
			},
			//当前读取的章节
			readIndex () {
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				return page.options.readIndex;
			},
			//阅读章节记录
			chapter () {
				let chapter = parseFloat(this.comicInfo.record.split('-')[0]);
				return chapter;
			},
			//上次阅读到章节第几张图
			pNum () {
				let chapter = parseFloat(this.comicInfo.record.split('-')[0]);
				return chapter == this.readIndex ? parseFloat(this.comicInfo.record.split('-')[1]) : 0;
			},
			//屏幕方向
			comicOrien () {
				return this.comicOrienMode;
			}
		},
		data () {
			return {
				comicSync: [],
				nowIndex: 0,
				//屏幕宽度，用于计算图片的高度
				windowWidth: 0,
				direction: 'up',
				nextShow: false,
				prevShow: false
			}
		},
		beforeCreate () {
			uni.$on('app-hide', (res) => {
				//app后台运行时更新阅读记录
				this.upReadStatus();
			})
		},
		onLoad () {
			uni.$emit('musicBtn-hide');
			this.changeOrien();
		},
		onReady () {
			setTimeout(() => {
				this.getSystemWidth().then((res) => {
					this.windowWidth = res;
					this.getComicSync();
				});
			}, 300)
		},
		methods: {
			...mapMutations(['updateBookRecord', 'updateBookReadStatus']),
			//读取漫画内容
			getComicSync () {
				uni.showLoading({
					title: '读取中..',
					mask: true
				})
				//重置页面
				this.comicSync = [];
				this.nextShow = false;
				this.prevShow = false;
				clearTimeout(this.timer);
				this.timer = setTimeout(() => {
					if ( this.comicInfo.source == 'local' ) {
						//读取本地漫画内容
						//正式用
						let getComicContent = new GetComicContent();
						let comicStr = getComicContent.getContent(this.comicInfo.path, this.chapter);
						this.comicSync = JSON.parse(JSON.parse(JSON.stringify(comicStr)));
						
						//调试用
						// let arr = [];
						// let fd = plus.android.newObject("java.io.File", this.comicInfo.path);
						// let list = plus.android.invoke(fd, "listFiles");
						// this.$nextTick(async () => {
						// 	if ( plus.android.invoke(list[this.chapter], "isDirectory") ) {
						// 		let childList = plus.android.invoke(list[this.chapter], "listFiles")
						// 		let len = childList.length;
						// 		for ( let i = 0; i < len; i++ ) {
						// 			let path = plus.android.invoke(childList[i], "getPath");
						// 			arr.push({
						// 				path: path,
						// 				name: plus.android.invoke(childList[i], "getName")
						// 			})
						// 		}
						// 	} else {
						// 		let len = list.length;
						// 		for ( let i = 0; i < len; i++ ) {
						// 			let path = plus.android.invoke(list[i], "getPath");
						// 			arr.push({
						// 				path: path,
						// 				name: plus.android.invoke(list[i], "getName")
						// 			})
						// 		}
						// 	}
						// 	arr.sort((a, b) => {
						// 		return cnnumtonum(a.name) - cnnumtonum(b.name);
						// 	})
						// 	this.comicSync = arr;
							
							
							setTimeout(() => {
								this.scrollTo();
							}, 50)
							uni.hideLoading();
						// }, 1)
					} else {
						//读取在线漫画内容
						this.getOnlineComicContent().then((res) => {
							this.comicSync = res;
							setTimeout(() => {
								this.scrollTo();
							}, 50)
							uni.hideLoading();
						}).catch((err) => {
							uni.showToast({
								title: '解析失败',
								icon: 'none'
							})
						});
					}
				}, 50)
			},
			//获取在线漫画内容
			getOnlineComicContent () {
				return new Promise((resolve, reject) => {
					getApp().globalData.routePush(
					`/pages/comic/getComicContent/index?url=${this.chapters[this.chapter].path}&source=${this.comicInfo.source}`,
					'none'
					).then(() => {
						uni.$on('comicContent', (res) => {
							resolve(res.data)
							getApp().globalData.routeBack();
							uni.$off('comicContent');
						})
					}).catch((err) => {
						reject(err)
					});
				})
			},
			//预览图片
			preview (path) {
				let index = indexOf(this.comicSync, path, 'path');
				let imgs = [];
				if ( this.comicInfo.source == 'local' ) {
					for ( let i = 0 ; i < this.comicSync.length; i++ ) {
						imgs.push('file://' + this.comicSync[i].path);
					}
				} else {
					for ( let i = 0 ; i < this.comicSync.length; i++ ) {
						imgs.push(this.comicSync[i].path);
					}
				}
				uni.previewImage({
					current: index,
					urls: imgs,
					longPressActions: {
					    itemList: ['分享', '保存相册'],
					    success: (data) => {
							//选择分享
							if ( data.tapIndex == 0 ) {
								this.shareImage(imgs[data.index], data.tapIndex);
							}
							//保存图片
							if ( data.tapIndex == 1 ) {
								this.saveImage(imgs[data.index], data.tapIndex);
							}
					    },
					    fail: function(err) {
					        console.log(err.errMsg);
					    }
					}
				});
			},
			//分享图片
			shareImage (url, flag) {
				if ( this.comicInfo.source == 'local' ) {
					//本地图片直接分享
					this.intentImage(url);
				} else {
					//网络图片先下载
					this.downloadImage(url, flag);
				}
			},
			//分享图片
			intentImage (path) {
				let shareIntent = new Intent(Intent.ACTION_SEND);
				let filePath = plus.io.convertLocalFileSystemURL(path);
				let file = plus.android.newObject("java.io.File", filePath);
				shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));
				shareIntent.setType("image/*");//此处可发送image图片
				main.startActivity(Intent.createChooser(shareIntent,"分享图片"));
			},
			//保存图片
			saveImage (url, flag) {
				if ( this.comicInfo.source == 'local' ) {
					//本地图片直接保存
					this.photoImage(url);
				} else {
					//网络图片先下载
					this.downloadImage(url, flag);
				}
			},
			//将图片保存到相册
			photoImage (path) {
				uni.saveImageToPhotosAlbum({
					filePath: path,
					success: function() {
						uni.showToast({
							title: '保存成功'
						})
					},
					fail: function() {
						uni.showToast({
							title: '保存失败',
							icon: 'none'
						})
					}
				});
			},
			//下载图片
			downloadImage (url, flag) {
				//网络图片先下载
				uni.downloadFile({
					url,
					success: (res) => {
						if (res.statusCode === 200) {
							if ( flag == 0 ) {
								this.intentImage(res.tempFilePath);
							}
							if ( flag == 1 ) {
								this.photoImage(res.tempFilePath);
							}
						} else {
							uni.showToast({
								title: '图片下载失败',
								icon: 'none'
							})
						}
					},
					fail: (err) => {
						uni.showToast({
							title: '网络错误',
							icon: 'none'
						})
					}
				});
			},
			//打开设置窗口
			showSetting () {
				this.$refs.comicSetting.show();
			},
			//滚动到指定的图片位置
			scrollTo () {
				this.nowIndex = this.pNum;
				dom.scrollToElement(this.$refs.comicBox[this.pNum], {animated: false});
			},
			scroll (e) {
				//向上滑动时
				if ( e.contentOffset.y < this.oldOffsetY ) {
					this.direction = 'up';
				} else {
					//向下滑动时
					this.direction = 'under';
				}
				//如果列表y轴偏移为0
				if ( e.contentOffset.y == 0 ) {
					this.nowIndex = 0;
				}
				this.oldOffsetY = e.contentOffset.y;
			},
			appear (index) {
				if ( this.direction == 'under' ) {
					this.nowIndex = index;
				}
			},
			disappear (index) {
				if ( this.direction == 'up' ) {
					this.nowIndex = index + 1;
				}
			},
			//前往上/下章节
			changeChapter (value) {
				if ( this.chapter == 0 && value < 0 ) {
					uni.showToast({
						title: '已经是第一话了',
						icon: 'none'
					})
					return;
				}
				if ( this.chapter == this.chapters.length - 1 && value > 0 ) {
					uni.showToast({
						title: '已经是最后一话了',
						icon: 'none'
					})
					return;
				}
				let chapter = parseInt(this.chapter) + value;
				this.upChapter(chapter);
				this.getComicSync();
			},
			//更新章节
			upChapter (chapter) {
				let record = chapter + '-0';
				this.updateBookRecord({
					path: this.comicInfo.path,
					record: record
				})
			},
			//获取屏幕宽度
			getSystemWidth () {
				return new Promise((resolve) => {
					uni.getSystemInfo({
						success: (res) => {
							resolve(res.safeArea.width)
						}
					})
				})
			},
			//改变屏幕方向
			changeOrien () {
				plus.screen.lockOrientation(this.comicOrien + '-primary');
			},
			upReadStatus () {
				//退出前更新本章节的阅读位置
				this.updateBookRecord({
					path: this.comicInfo.path,
					record: this.chapter + '-' + this.nowIndex
				})
				//退出前判断有没有读完漫画
				if ( this.nextShow ) {
					//本地漫画才判断有没有读完
					if ( this.comicInfo.source == 'local' ) {
						this.updateBookReadStatus({
							path: this.comicInfo.path,
							isReaded: this.chapter + 1 >= this.chapters.length
						})
					}
				} else {
					this.updateBookReadStatus({
						path: this.comicInfo.path,
						isReaded: false
					})
				}
			}
		},
		watch: {
			pNum () {
				this.scrollTo();
			},
			chapter () {
				this.getComicSync();
			},
			comicOrien () {
				this.changeOrien()
			}
		},
		beforeDestroy() {
			uni.$emit('musicBtn-show');
			uni.$off('app-hide');
		},
		onUnload () {
			//页面卸载更新阅读记录
			this.upReadStatus();
		},
		onResize () {
			//重新计算屏幕宽度和图片高度
			setTimeout(async () => {
				this.windowWidth = await this.getSystemWidth();
			}, 100)
		},
		onBackPress(event) {
			if ( event.from == 'backbutton' ) {
				//判断设置窗口是否打开
				if ( this.$refs.comicSetting.isShow ) {
					this.$refs.comicSetting.hide();
					return true;
				}
			}
			let size = plus.screen.getCurrentSize();
			//横屏
			if ( size.width > size.height ) {
				//退出前锁定为竖屏
				plus.screen.lockOrientation('portrait-primary');
			}
			clearTimeout(this.timer);
			return false;
		},
		components: {
			ComicSetting,
			CImage,
			GapBar
		}
	}
</script>

<style scoped>
	.comic-box {
		border-bottom-width: 1px;
	}
	.comic-image {
		/* width: 750rpx; */
		padding: 1rpx 0;
	}
	.touch-box {
		justify-content: center;
		align-items: center;
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.menu {
		width: 200rpx;
		height: 200rpx;
		border-style: dashed;
		border-color: #FFFFFF;
		border-width: 5rpx;
		border-radius: 10rpx;
		align-items: center;
		justify-content: center;
		background-color: rgba(255,255,255,0.5);
		opacity: 0;
	}
	.menu-text {
		font-size: 40rpx;
	}
	.chapter-box {
		position: fixed;
		top: 50rpx;
		bottom: 50rpx;
		width: 70rpx;
		background-color: rgba(76,217,100,0.8);
		align-items: center;
		justify-content: center;
	}
	.prev-chapter {
		left: 0;
		border-top-right-radius: 50rpx;
		border-bottom-right-radius: 50rpx;
	}
	.next-chapter {
		right: 0;
		border-top-left-radius: 50rpx;
		border-bottom-left-radius: 50rpx;
	}
	.chapter-text {
		font-size: 40rpx;
		color: #FFFFFF;
		text-align: center;
	}
</style>
