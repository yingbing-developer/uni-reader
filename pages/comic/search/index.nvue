<template>
	<view class="search" :style="{'background-color': skinColor.color_bg_1}">
		<nav-bar title="添加漫画" :bgColor="skinColor.color_theme_1" :titleColor="skinColor.color_4">
			<view class="nav-right" slot="right">
				<text class="nav-text" :style="{'color': skinColor.color_4}" v-if="checkes.length > 0">选中({{checkes.length}}/{{comicSync.length}})</text>
				<view @tap="$refs.bubble.show()">
					<c-icon name="more" size="37.5" :color="skinColor.color_4"></c-icon>
				</view>
			</view>
		</nav-bar>
		<c-search @confirm="setNameFilter" v-if="comicPathHistory"></c-search>
		<!-- 资源路径选择列表 -->
		<file-list
		v-if="!comicPathHistory"
		:titleShow="false"
		@updatePath="updatePath"></file-list>
		
		<!-- 漫画列表 -->
		<list-scroll @scroll="scroll" :line-height="200" :list="comicSync" v-else>
			<!-- 列表顶部 用于返回顶部 -->
			<view slot="listTop" ref="listTop"></view>
			<template v-slot="{item}">
				<view @tap="readComic(item.path)" @longpress="showAction(item.path)" class="comic-list" :style="{'border-bottom-color': skinColor.color_gap_1, 'background-color': checkes.indexOf(item.path) > -1 ? skinColor.color_gap_1 : ''}">
					<view class="comic-list-icon" @tap.stop="check(item.path)">
						<c-image class="comic-image" :src="item.image" mode="aspectFill"></c-image>
					</view>
					<view class="comic-list-right">
						<view class="comic-lr-line">
							<text class="comic-list-title" :style="{'color': skinColor.color_1}">{{item.name}}</text>
						</view>
						<view class="comic-lr-line">
							<text class="comic-list-text" :style="{'color': skinColor.color_2}">章节：共{{item.length}}话</text>
						</view>
						<view class="comic-lr-line">
							<text class="comic-list-text" :style="{'color': skinColor.color_2}">状态：{{isLead(item.path) > -1 ? '已导入' : '未导入'}}</text>
						</view>
						<view class="comic-lr-line">
							<text class="comic-list-text" :style="{'color': skinColor.color_2}">时间：{{item.time}}</text>
						</view>
					</view>
				</view>
			</template>
		</list-scroll>
		
		<!-- 读取漫画资源按钮 -->
		<view class="btn-box" :style="{'border-top-color': skinColor.color_gap_1}" v-if="!comicPathHistory">
			<view class="btn" @tap="checkPath">
				<text class="btn-text">读取当前路径下的漫画资源</text>
			</view>
		</view>
		
		<!-- 导入漫画按钮 -->
		<view class="btn-box" :style="{'border-top-color': skinColor.color_gap_1}" v-if="checkes.length > 0">
			<view class="btn" @tap="leadBook">
				<text class="btn-text">导入漫画</text>
			</view>
		</view>
		
		<!-- 气泡弹窗 -->
		<bubble ref="bubble">
			<block v-if="comicSync.length > 0">
				<bubble-item title="全选" @click="selectAll" v-if="checkes.length < comicSync.length"></bubble-item>
				<bubble-item title="取消全选" @click="cancelAll" v-if="checkes.length == comicSync.length"></bubble-item>
			</block>
			<bubble-item title="删除漫画" @click="deleteAction" v-if="checkes.length > 0"></bubble-item>
			<bubble-item title="内部存储" @click="goInternalRoot"></bubble-item>
			<bubble-item :title="'SD卡-' + (index + 1)" @click="goExtenalRoot(item.path)"  v-for="(item, index) in SDpaths" :key="index"></bubble-item>
		</bubble>
		  
		<view class="fixed">
			<view @tap="scrollTop">
				<fixed-button :color="skinColor.color_theme_1" :show="Math.abs(oldOffsetY) > 300">
					<c-icon name="top" size="40" :color="skinColor.color_4"></c-icon>
				</fixed-button>
			</view>
		</view>
	</view>
</template>

<script>
	import appMixin from '@/common/mixin/app.js'
	import bookMixin from '@/common/mixin/book.js';
	import CIcon from '@/components/c-icon/c-icon.nvue'
	import CSearch from '@/components/search/search.nvue'
	import ListScroll from '@/components/list-scroll/list-scroll.nvue'
	import FileList from '@/components/fileList/fileList.nvue';
	import Bubble from '@/components/bubble/bubble.nvue'
	import BubbleItem from '@/components/bubble-item/bubble-item.nvue'
	import CImage from '@/components/c-image/c-image.nvue'
	const main = plus.android.runtimeMainActivity();
	const Intent = plus.android.importClass("android.content.Intent");
	const Uri = plus.android.importClass("android.net.Uri");
	const environment = plus.android.importClass("android.os.Environment");
	const suffixs = 'jpg,png,gif,JPG,PNG,GIF'
	const options = 'name,path';
	const zipName = '_SHARE_HAOYONG_READER';
	const dom = weex.requireModule('dom');
	export default {
		mixins: [appMixin, bookMixin],
		data () {
			return {
				list: [],
				checkes: [],
				comicPath: '',
				//漫画列表
				comicList: [],
				//名称过滤
				nameFilter: '',
				//滚动距离
				oldOffsetY: 0,
				//扩展存储卡路径
				SDpaths: []
			}
		},
		computed: {
			comicSync () {
				let arr = this.comicList.filter((item) => {
					if ( item.name.indexOf(this.nameFilter) > -1 ) {
						return item;
					}
				})
				return arr;
			}
		},
		created () {
			if ( this.comicPathHistory ) {
				this.getComicList(this.comicPathHistory);
			}
		},
		onShow () {
			//删除掉生成的临时压缩文件
			setTimeout(() => {
				let folder = plus.android.newObject("java.io.File", this.comicPathHistory);
				let files = plus.android.invoke(folder, 'listFiles');
				let len = files ? files.length : 0
				for ( let i = 0; i < len; i++ ) {
					let name = plus.android.invoke(files[i], 'getName');
					if ( plus.android.invoke(name, "endsWith", '.zip') && name.indexOf(zipName) > -1 && plus.android.invoke(files[i], 'exists') && files[i] != null  ) {
						plus.android.invoke(files[i], 'delete');
					}
				}
			}, 20)
		},
		methods: {
			scroll (e) {
				this.oldOffsetY = e.contentOffset.y;
			},
			updatePath (path) {
				this.comicPath = path;
			},
			goInternalRoot () {
				this.clearComicPath();
				this.$refs.bubble.hide();
			},
			//选择资源路径
			checkPath () {
				getApp().globalData.$dom.confirm('操作提示', '确认读取当前路径下的漫画资源吗？').then((res) => {
					if ( res == 'confirm' ) {
						this.updateComicPath(this.comicPath);
						this.getComicList(this.comicPath);
					}
				});
			},
			//读取漫画列表
			getComicList (path) {
				uni.showLoading({
					title: '读取中..'
				})
				let ff = plus.android.newObject("java.io.File", path);
				if ( ff == null && !plus.android.invoke(ff, 'exists') ) {
					uni.showToast({
						title: '资源路径失效，请重新选择资源路径',
						icon: 'none'
					})
					this.clearComicPath();
					return;
				}
				//正式用
				const GetComicList = plus.android.importClass('com.itstudy.io.GetComicList');
				if ( GetComicList ) {
					let getComicList = new GetComicList();
					let comicStr = getComicList.getComic(plus.io.convertLocalFileSystemURL(path));
					if ( comicStr ) {
						this.comicList = JSON.parse(JSON.parse(JSON.stringify(comicStr)));
						this.comicList.sort((a, b) => {
							return b.createTime; - a.createTime
						})
					}
				}
				//调试用
				// let comicList = []
				// let list = plus.android.invoke(ff, 'listFiles');
				// let len = list.length;
				// for(let i = 0; i < len; i++){
				// 	// 文件夹
				// 	if ( plus.android.invoke(list[i], 'isDirectory') ) {
				// 		let path = plus.android.invoke(list[i], 'getPath')
				// 		comicList.push({
				// 			name: plus.android.invoke(list[i], 'getName'),
				// 			image: this.getComicImage(path),
				// 			time: dateFormat(plus.android.invoke(list[i],"lastModified")),
				// 			createTime: plus.android.invoke(list[i],"lastModified"),
				// 			path: path,
				// 			length: this.getComicLength(path)
				// 		})
				// 	}
				// }
				// comicList.sort((a, b) => {
				// 	return b.createTime; - a.createTime
				// })
				// this.comicList = comicList;
				
				uni.hideLoading();
			},
			//获取漫画章节数
			getComicLength (path) {
				let file = plus.android.newObject("java.io.File", path)
				let list = plus.android.invoke(file, "listFiles");
				let length = 0;
				let len = list.length;
				for ( let i = 0; i < len; i++ ) {
					if ( plus.android.invoke(list[0], "isDirectory") ) {
						length += 1;
					}
				}
				return length == 0 && list.length > 0 ? 1 : length;
			},
			//获取漫画预览图
			getComicImage (path) {
				let file = plus.android.newObject("java.io.File", path)
				let list = plus.android.invoke(file, "listFiles");
				//首个文件是文件夹
				if ( plus.android.invoke(list[0], "isDirectory") ) {
					let childList = plus.android.invoke(list[0], "listFiles");
					return plus.android.invoke(childList[0],"getPath")
				} else {
					return plus.android.invoke(list[0],"getPath")
				}
			},
			//全选文件
			selectAll () {
				this.checkes = [];
				let len = this.comicSync.length;
				for ( let i = 0; i < len; i++ ) {
					this.checkes.push(this.comicSync[i].path)
				}	
				this.$refs.bubble.hide();
			},
			//取消全选
			cancelAll () {
				this.checkes = [];
				this.$refs.bubble.hide();
			},
			//删除操作
			deleteAction () {
				if ( this.checkes.length <= 0 ) {
					return;
				}
				getApp().globalData.$dom.confirm('操作提示', '确认删除选择的文件吗？').then((res) => {
					if ( res == 'confirm' ) {
						this.deleteFiles(this.checkes);
					}
				});
				this.$refs.bubble.hide();
			},
			//选择文件
			check (path) {
				let index = this.checkes.indexOf(path);
				if ( index > -1 ) {
					this.checkes.splice(index, 1);
				} else {
					this.checkes.push(path);
				}
			},
			//导入文件
			leadBook () {
				if ( this.checkes.length <= 0 ) {
					uni.showToast({
						icon: 'none',
						title: '请选择文件'
					})
					return;
				}
				let books = [];
				let err = 0;
				let len = this.checkes.length;
				for ( let i = 0; i < len; i++ ) {
					//根据文件路径判断文件有没有被导入过
					let index = getApp().globalData.$utisl.indexOf(this.comicList, 'path', this.checkes[i]);
					if ( this.isLead(this.comicList[index].path) == -1 ) {
						books.push({
							name: this.comicList[index].name,
							image: this.comicList[index].image,
							length: this.comicList[index].length,
							type: 'comic',
							path: this.comicList[index].path
						});
					} else {
						err++;
					}
				}
				this.addBooks(books);
				if ( err == 0 ) {
					uni.showToast({
						title: '添加成功'
					})
				} else {
					uni.showToast({
						title: '成功导入' + (this.checkes.length - err) + '个文件，' + '有' + err + '个文件导入失败',
						icon: 'none'
					})
				}
				this.checkes = [];
			},
			//过滤名称
			setNameFilter (val) {
				this.nameFilter = val;
			},
			//展示操作列表
			showAction (path) {
				let flag = getApp().globalData.$utisl.indexOf(this.list, 'path', path);
				let actions = [];
				//已经导入的文件操作列表
				if ( this.isLead(path) > -1 ) {
					actions = [{
						title: '取消导入',
						value: 'pop'
					},{
						title: '删除',
						value: 'delete'
					},{
						title: '分享',
						value: 'share'
					}]
				} else {
					//未导入的文件的操作列表
					actions = [{
						title: '导入',
						value: 'push'
					},{
						title: '删除',
						value: 'delete'
					},{
						title: '分享',
						value: 'share'
					}]
				}
				getApp().globalData.$dom.actionSheet(actions).then((val) => {
					//用户选择导入操作
					if ( val == 'push' ) {
						//根据文件路径判断文件有没有被导入过
						if ( this.isLead(path) == -1 ) {
							let flag = getApp().globalData.$utisl.indexOf(this.comicList, 'path', path);
							let books = [];
							books.push({
								name: this.comicList[flag].name,
								image: this.comicList[flag].image,
								length: this.comicList[flag].length,
								type: 'comic',
								path: this.comicList[flag].path
							});
							this.addBooks(books);
							uni.showToast({
								title: '导入成功'
							})
						} else {
							uni.showToast({
								title: '这本书已经导入了',
								icon: 'none'
							})
						}
					}
					//选择取消导入
					if ( val == 'pop' ) {
						let name = this.comicList[getApp().globalData.$utisl.indexOf(this.comicList, 'path', path)].name;
						getApp().globalData.$dom.confirm('操作提示', '确认将  ' + name +'  从导入列表删除吗？').then((res) => {
							if ( res == 'confirm' ) {
								this.deleteBook(path);
							}
						});
					}
					//用户选择删除操作
					if ( val == 'delete' ) {
						let name = this.comicList[getApp().globalData.$utisl.indexOf(this.comicList, 'path', path)].name;
						getApp().globalData.$dom.confirm('操作提示', '确认要删除  ' + name + '  吗？').then((res) => {
							if ( res == 'confirm' ) {
								this.deleteFiles([path]);
							}
						});
					}
					
					//分享
					if ( val == 'share' ) {
						this.share(path);
					}
				})
			},
			//分享漫画
			share () {
				//分享之前需要先压缩
				uni.showLoading({
					title: '压缩中..'
				})
				let actionFile = plus.android.newObject("java.io.File", path);
				let zipFile = this.comicPathHistory + '/' + plus.android.invoke(actionFile, 'getName') + zipName + '.zip';
				let file = plus.android.newObject("java.io.File", zipFile);
				if ( plus.android.invoke(file, 'exists') && file != null ) {
					plus.android.invoke(file, 'delete');
				}
				let targetPath = plus.io.convertLocalFileSystemURL(path);
				plus.zip.compress(targetPath, zipFile,
					() => {
						uni.hideLoading();
						let shareIntent = new Intent(Intent.ACTION_SEND);
						let file = plus.android.newObject("java.io.File", zipFile);
						shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));
						shareIntent.setType("application/zip");//此处可发送压缩文件
						main.startActivity(Intent.createChooser(shareIntent,"分享文件"));
					}, (error) => {
						console.log(error);
						uni.showToast({
							title: '分享失败',
							icon: 'none'
						})
				});
			},
			//删除漫画
			deleteFiles (list) {
				plus.nativeUI.showWaiting("删除中..")
				let suc = 0;
				let err = 0;
				let clearList = (path) => {
					//如果被删除的文件已经被导入
					let flag = this.isLead(path);
					if ( flag > -1 ) {
						this.deleteBook(path);
					}
					//删除当前页面显示的数据
					let index = getApp().globalData.$utils.indexOf(this.comicList, 'path', path);
					this.comicList.splice(index, 1);
				}
				let len = list.length;
				for ( let i = 0; i < len; i++ ) {
					let fd = plus.android.newObject("java.io.File", list[i]);
					//如果路径存在
					if (fd != null && plus.android.invoke(fd, 'exists')){
						// 获取并遍历子文件
						let childList = plus.android.invoke(fd, 'listFiles');
						let childLen = childList.length;
						for ( let j = 0; j < childLen; j++ ) {
							//获取子文件下的子文件
							let grandList = plus.android.invoke(childList[j], 'listFiles');
							//如果子文件下有子文件 先删除子文件下的子文件再删除子文件
							let grandLen = grandList ? grandList.length : 0;
							if ( grandLen > 0 ) {
								for ( let k = 0; k < grandLen; k++ ) {
									plus.android.invoke(grandList[k], 'delete');
								}
								plus.android.invoke(childList[j], 'delete');
							} else {
								//子文件下没有子文件,直接删除掉子文件
								plus.android.invoke(childList[j], 'delete');
							}
						}
						//最后删除整个路径下的文件夹
						let isDeleted = plus.android.invoke(fd, 'delete');
						//删除成功
						if ( isDeleted ) {
							suc++
							clearList(list[i]);
						} else {
							//删除失败
							err++
						}
						
					} else {
						//文件不存在
						err++
						clearList(list[i]);
					}
				}
				this.checkes = [];
				plus.nativeUI.closeWaiting();
				if ( err ) {
					uni.showToast({
						icon: 'none',
						title: '成功删除' + suc + '个文件, 删除失败' + err + '个文件'
					})
				} else {
					uni.showToast({
						icon: 'none',
						title: '删除成功'
					})
				}
				
			},
			//阅读漫画
			readComic (path) {
				let index = getApp().globalData.$utisl.indexOf(this.comicList, 'path', path);
				let fd = plus.android.newObject("java.io.File", path);
				if ( fd == null || !plus.android.invoke(fd, 'exists') ) {
					plus.nativeUI.toast("漫画路径不存在！", {verticalAlign: 'bottom'});
					this.comicList.splice(index, 1);
					return;
				}
				//查询有没有导入过该漫画
				let bookIndex = getApp().globalData.$utisl.indexOf(this.bookList, 'path', path);
				//导入过直接阅读
				if ( bookIndex > -1 ) {
					getApp().globalData.$Router.push({path: '/pages/comic/detail/index', query: {index: bookIndex}});
				} else {
					//未导入，则先导入再进行阅读
					let books = [];
					books.push({
						name: this.comicList[index].name,
						image: this.comicList[index].image,
						length: this.comicList[index].length,
						type: 'comic',
						path: this.comicList[index].path
					});
					this.addBooks(books);
					this.$nextTick(() => {
						bookIndex = getApp().globalData.$utisl.indexOf(this.bookList, 'path', path);
						if ( bookIndex > -1 ) {
							getApp().globalData.$Router.push({path: '/pages/comic/detail/index', query: {index: bookIndex}});
						} else {
							plus.nativeUI.toast("文件导入失败！", {verticalAlign: 'bottom'});
						}
					})
				}
			},
			//根据文件路径判断当前文件是否已经导入,返回下标
			isLead (path) {
				return getApp().globalData.$utisl.indexOf(this.bookList, 'path', path);
			}
		},
		onBackPress(event) {
			//气泡菜单打开时,先关闭气泡菜单
			if ( this.$refs.bubble.isShow ) {
				this.$refs.bubble.hide();
				return true;
			}
			return false;
		},
		components: {
			CIcon,
			CSearch,
			Bubble,
			BubbleItem,
			CImage,
			ListScroll,
			FileList
		}
	}
</script>

<style scoped>
	.nav-right {
		flex-direction: row;
		flex: 1;
		justify-content: flex-end;
		align-items: center;
	}
	.nav-text {
		font-size: 30rpx;
		margin-right: 22.5rpx;
		text-overflow: ellipsis;
		lines: 1;
	}
	.list {
		flex-direction: row;
		border-bottom-width: 1px;
		border-bottom-style: solid;
		padding-left: 15rpx;
		padding-right: 15rpx;
		padding-top: 15rpx;
		padding-bottom: 15rpx;
		height: 108rpx;
	}
	.list-icon {
		justify-content: center;
		align-items: center;
		margin-right: 15rpx;
		width: 75rpx;
		position: relative;
	}
	.list-right {
		flex: 1;
		justify-content: space-between;
	}
	.list-right-back {
		flex-direction: row;
		align-items: center;
	}
	.lr-top {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}
	.list-title {
		flex: 1;
		font-size: 30rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.lt-right {
		width: 70rpx;
	}
	.lr-bottom {
		flex-direction: row;
		justify-content: space-between;
	}
	.list-text {
		font-size: 24rpx;
	}
	.comic-list {
		flex-direction: row;
		border-bottom-width: 1px;
		border-bottom-style: solid;
		padding: 20rpx;
		height: 200rpx;
		position: relative;
	}
	.comic-list-icon {
		justify-content: center;
		align-items: center;
		width: 150rpx;
		position: relative;
	}
	.comic-image {
		width: 150rpx;
		height: 200rpx;
	}
	.comic-list-right {
		flex: 1;
		justify-content: space-between;
		margin-left: 20rpx;
	}
	.comic-list-right-back {
		flex-direction: row;
		align-items: center;
	}
	.comic-lr-line {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}
	.comic-list-title {
		flex: 1;
		font-size: 30rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.comic-lt-right {
		width: 70rpx;
	}
	.comic-list-text {
		font-size: 24rpx;
	}
	.btn-box {
		padding: 15rpx 30rpx;
		border-top-width: 1px;
		border-top-style: solid;
	}
	.btn {
		height: 75rpx;
		justify-content: center;
		align-items: center;
		background-color: #007AFF;
	}
	.btn-text {
		font-size: 27rpx;
		color: #F1F1F1;
	}
	.fixed {
		position: fixed;
		bottom: 20px;
		right: 20px;
		width: 90rpx;
		align-items: center;
		justify-content: flex-end;
	}
</style>
