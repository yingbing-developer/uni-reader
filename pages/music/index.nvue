<template>
	<view class="music">
		<view class="mask" ref="mask" @tap="back"></view>
		<view class="popup" :style="{'background-color': skinColor.bgColor}">
			<view class="top">
				<view class="mode" @tap="changeMode">
					<c-icon name="loop" size="55" :color="skinColor.menuIconColor" v-if="getMusicPlayMode == 'loop'"></c-icon>
					<c-icon name="once" size="55" :color="skinColor.menuIconColor" v-if="getMusicPlayMode == 'once'"></c-icon>
					<c-icon name="random" size="55" :color="skinColor.menuIconColor" v-if="getMusicPlayMode == 'random'"></c-icon>
					<text class="modeName" :style="{color: skinColor.menuIconColor}">{{modeName}}</text>
				</view>
				<view class="clear" @tap="clear" v-if="listSync.length > 0">
					<c-icon name="waste-fill" size="42" :color="skinColor.menuIconColor"></c-icon>
				</view>
			</view>
			<list-scroll :list="listSync" :lineHeight="100" ref="musicList">
				<template v-slot="{item}">
					<view class="list actived" @tap="playMusic(item.path)">
						<text class="list-name" :style="{color: playRecord == item.path ? '#d43c33' : skinColor.menuTitleColor}">{{item.name}}</text>
						<view class="list-right">
							<view class="list-icon">
								<c-icon name="pause" size="37" color="#d43c33" v-if="playStatus && playRecord == item.path"></c-icon>
								<c-icon name="play" size="35" color="#d43c33" v-else></c-icon>
							</view>
							<view class="list-icon" @tap.stop="deleteItem(item.path)">
								<c-icon name="delete" size="30" color="#d43c33"></c-icon>
							</view>
						</view>	
					</view>
				</template>
				<no-data slot="fixed" title="没有导入的歌曲哦!" v-if="playList.length <= 0"></no-data>
			</list-scroll>
			<view class="progress-line" v-if="musicDuration">
				<text class="progress-num" :style="{color: skinColor.titleColor}">{{playTime | minutesFormat}}</text>
				<c-progress class="progress" :value="musicProgress" @input="updateTime" itemShow></c-progress>
				<text class="progress-num" :style="{color: skinColor.titleColor}">{{musicDuration | minutesFormat}}</text>
			</view>
			<view class="add" @touchmove.stop.prevent="">
				<view class="add-btn" :style="{'border-color': skinColor.menuTitleColor}" @tap="routePush('/pages/music/search')">
					<text class="add-text" :style="{color: skinColor.menuTitleColor}">添加歌曲</text>
				</view>
			</view>
			<view class="close" @tap="back" :style="{'background-color': skinColor.navColor}">
				<text class="close-text" :style="{color: skinColor.activeColor}">关闭</text>
			</view>
		</view>
	</view>
</template>

<script>
	import ListScroll from '@/components/list-scroll/list-scroll.nvue'
	import CIcon from '@/components/c-icon/c-icon.nvue'
	import CProgress from '@/components/progress/progress.nvue'
	import NoData from '@/components/no-data/no-data.nvue'
	import { mapGetters, mapMutations } from 'vuex';
	import { skinMixin } from '@/common/mixin/index.js';
	import { indexOf } from '@/common/js/util.js';
	const animation = weex.requireModule('animation');
	export default {
		mixins: [skinMixin],
		onReady() {
			setTimeout(() => {
				let index = indexOf(this.listSync, this.playRecord, 'path');
				this.$refs.musicList.scrollTo(index);
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: 1
				    },
				    duration: 300, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
			}, 300)
		},
		computed: {
			...mapGetters(['playList', 'getMusicPlayStatus' , 'getMusicPlayMode', 'getMusicPlayRecord', 'getMusicPlayTime', 'getMusicPlayDuration']),
			listSync () {
				let arr = this.playList.filter((item) => {
					return item;
				})
				return arr;
			},
			playStatus () {
				return this.getMusicPlayStatus;
			},
			modeName () {
				return this.getMusicPlayMode == 'loop' ? '顺序播放' : this.getMusicPlayMode == 'once' ? '单曲循环' : '随机播放';
			},
			playRecord () {
				return this.getMusicPlayRecord;
			},
			//已播放时长
			playTime () {
				return this.getMusicPlayTime;
			},
			//音乐时长
			musicDuration () {
				return this.getMusicPlayDuration;
			},
			musicProgress () {
				return (this.playTime / this.musicDuration) * 100
			}
		},
		filters: {
			minutesFormat (value) {
				let minutes = Math.floor(value / 60) >= 10 ? Math.floor(value / 60) : '0' + Math.floor(value / 60);
				let seconds = Math.ceil(value - (minutes * 60)) >= 10 ? Math.ceil(value - (minutes * 60)) : '0' + Math.ceil(value - (minutes * 60));
				return minutes + ':' + seconds;
			}
		},
		methods: {
			...mapMutations(['changeMusicPlayMode', 'changeMusicPlayStatus', 'clearMusic', 'deleteMusic', 'updateMusicPlayRecord']),
			back () {
				uni.navigateBack({
					delta: 1
				})
			},
			//清空歌曲
			clear () {
				getApp().globalData.message('操作提示', '确认清空歌曲列表吗？').then((res) => {
					if ( res == 'confirm' ) {
						this.clearMusic();
					}
				});
			},
			//删除指定歌曲
			deleteItem (path) {
				let index = indexOf(this.playList, path, 'path');
				getApp().globalData.message('操作提示', '确认删除 ' + this.playList[index].name + ' 吗？').then((res) => {
					if ( res == 'confirm' ) {
						this.deleteMusic(path);
					}
				});
			},
			//改变播放模式
			changeMode () {
				switch(this.getMusicPlayMode)
				{
				    case 'loop':
				        this.changeMusicPlayMode('once');
				        break;
				    case 'once':
				        this.changeMusicPlayMode('random');
				        break;
				    default:
				        this.changeMusicPlayMode('loop');
						break;
				}
			},
			playMusic (path) {
				if ( this.playRecord == path ) {
					uni.$emit('change-status', {
						status: !this.playStatus
					})
				} else {
					this.updateMusicPlayRecord(path)
				}
			},
			//更新时间
			updateTime (percent) {
				uni.$emit('update-time', {
					time: (percent / 100) * this.musicDuration
				})
			},
			routePush (url) {
				getApp().globalData.routePush(url);
			}
		},
		onBackPress () {
			animation.transition(this.$refs.mask, {
			    styles: {
					opacity: 0
			    },
			    duration: 0, //ms
			    timingFunction: 'ease',
			    needLayout:false,
			    delay: 0 //ms
			})
		},
		components: {
			ListScroll,
			CIcon,
			NoData,
			CProgress
		}
	}
</script>

<style scoped>
	.mask {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		opacity: 0;
		background-color: rgba(0,0,0,0.2);
	}
	.popup {
		position: fixed;
		top: 300rpx;
		left: 0;
		right: 0;
		bottom: 0;
		border-top-left-radius: 50rpx;
		border-top-right-radius: 50rpx;
	}
	.top {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 40rpx 30rpx;
	}
	.mode {
		flex-direction: row;
		align-items: center;
	}
	.modeName {
		font-size: 32rpx;
		margin-left: 15rpx;
	}
	.list {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		height: 100rpx;
		padding: 0 30rpx;
	}
	.list-right {
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		width: 100rpx;
	}
	.list-name {
		flex: 1;
		font-size: 28rpx;
		margin-left: 15rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.progress-line {
		padding: 20rpx 30rpx;
		flex-direction: row;
		align-items: center;
	}
	.progress {
		flex: 1;
	}
	.progress-num {
		width: 100rpx;
		font-size: 28rpx;
		text-align: center;
	}
	.add {
		align-items: center;
	}
	.add-btn {
		width: 220rpx;
		height: 60rpx;
		border-radius: 60rpx;
		justify-content: center;
		align-items: center;
		border-width: 1px;
		border-style: solid;
		margin: 30rpx 0 60rpx 0;
	}
	.add-text {
		font-size: 28rpx;
	}
	.close {
		height: 100rpx;
		align-items: center;
		justify-content: center;
	}
	.close-text {
		font-size: 35rpx;
	}
</style>
