<template>
	<view class="setting" :style="{'background-color': skinColor.bgColor}">
		<nav-bar title="阅读设置" :backColor="skinColor.iconColor" :bgColor="skinColor.navColor" :titleColor="skinColor.iconColor"></nav-bar>
		<list>
			<cell>
				<view class="list list2" :style="{'border-bottom-color': skinColor.gapColor}">
					<text class="list-title" :style="{'color': skinColor.titleColor}">阅读动画</text>
					<view class="list-right list-bottom">
						<text
						@tap="changeBookPageMode(item.value)"
						:style="{
							'background-color': bookReadMode.pageMode == item.value ? skinColor.activeBgColor : '',
							'color': bookReadMode.pageMode == item.value ? skinColor.activeColor : skinColor.titleColor
						}"
						class="lr-text" v-for="(item, index) in pages"
						:key="index">{{item.title}}</text>
					</view>
				</view>
			</cell>
			<cell v-if="bookReadMode.pageMode != 'none'">
				<view class="list list2" :style="{'border-bottom-color': skinColor.gapColor}">
					<text class="list-title" :style="{'color': skinColor.titleColor}">翻页方式</text>
					<view class="list-right list-bottom">
						<text
						@tap="changeBookReadPageType(item.value)"
						:style="{
							'background-color': bookReadMode.pageType == item.value ? skinColor.activeBgColor : '',
							'color': bookReadMode.pageType == item.value ? skinColor.activeColor : skinColor.titleColor
						}"
						class="lr-text" v-for="(item, index) in pageTypes"
						:key="index">{{item.title}}</text>
					</view>
				</view>
			</cell>
			<cell>
				<view class="list list2" :style="{'border-bottom-color': skinColor.gapColor}">
					<text class="list-title" :style="{'color': skinColor.titleColor}">漫画来源</text>
					<view class="list-bottom">
						<view class="check-line" v-for="(item, index) in comicSource">
							<text class="lr-text" :style="{'color': skinColor.menuTitleColor}">{{item.title}}</text>
							<c-switch
							:itemColor='skinColor.itemColor'
							:gapColor="skinColor.gapColor"
							:bgColor="skinColor.bgColor"
							:value="item.isOpen"
							@input="changeComicSources($event, index)"></c-switch>
						</view>
					</view>
				</view>
			</cell>
			<cell>
				<view class="list list2" :style="{'border-bottom-color': skinColor.gapColor}">
					<text class="list-title" :style="{'color': skinColor.titleColor}">音乐来源</text>
					<view class="list-bottom">
						<view class="check-line" v-for="(item, index) in musicSource">
							<text class="lr-text" :style="{'color': skinColor.menuTitleColor}">{{item.title}}</text>
							<c-switch
							:itemColor='skinColor.itemColor'
							:gapColor="skinColor.gapColor"
							:bgColor="skinColor.bgColor"
							:value="item.isOpen"
							@input="changeMusicSources($event, index)"></c-switch>
						</view>
					</view>
				</view>
			</cell>
		</list>
	</view>
</template>

<script>
	import { skinMixin } from '@/common/mixin/index.js'
	import { COMICURL, MUSICURL } from '@/common/js/config.js'
	import { mapGetters, mapMutations } from 'vuex'
	import CSwitch from '@/components/c-switch/c-switch.nvue'
	export default {
		mixins:[skinMixin],
		data () {
			return {
				pages: [{
					title: '左右滑动',
					value: 'L2RTrans'
				},{
					title: '上下滑动',
					value: 'U2DTrans'
				},{
					title: '仿真翻页',
					value: 'RealPage'
				},{
					title: '覆盖翻页',
					value: 'CoverPage'
				},{
					title: '关闭动画',
					value: 'none'
				}],
				pageTypes: [{
					title: '触摸',
					value: 'touch'
				},{
					title: '点击',
					value: 'click'
				}],
				comicSource: [],
				musicSource: []
			}
		},
		onLoad () {
			for ( let i in COMICURL ) {
				let index = this.getComicSourcesController.indexOf(i);
				this.comicSource.push({
					isOpen: index > -1 ? false : true,
					title: COMICURL[i].title,
					value: i
				})
			}
			for ( let i in MUSICURL ) {
				let index = this.getMusicSourcesController.indexOf(i);
				this.musicSource.push({
					isOpen: index > -1 ? false : true,
					title: MUSICURL[i].title,
					value: i
				})
			}
		},
		computed: {
			...mapGetters(['bookReadMode', 'getComicSourcesController', 'getMusicSourcesController'])
		},
		methods: {
			...mapMutations(['changeBookPageMode', 'changeBookReadPageType', 'setComicSourcesController', 'setMusicSourcesController']),
			changeComicSources (bool, index) {
				this.$set(this.comicSource[index], 'isOpen', bool);
				let arr = [];
				for ( let i in this.comicSource ) {
					if ( !this.comicSource[i].isOpen ) {
						arr.push(this.comicSource[i].value)
					}
				}
				this.setComicSourcesController(arr);
			},
			changeMusicSources (bool, index) {
				this.$set(this.musicSource[index], 'isOpen', bool);
				let arr = [];
				for ( let i in this.musicSource ) {
					if ( !this.musicSource[i].isOpen ) {
						arr.push(this.musicSource[i].value)
					}
				}
				this.setMusicSourcesController(arr);
			}
		},
		components: {
			CSwitch
		}
	}
</script>

<style scoped>
	.list {
		padding: 30rpx 30rpx;
		border-bottom-width: 1px;
		flex-direction: row;
	}
	.list2 {
		flex-direction: column;
	}
	.list-title {
		font-size: 32rpx;
	}
	.list-right {
		flex-direction: row;
		align-items: center;
	}
	.lr-text {
		font-size: 26rpx;
		border-radius: 10rpx;
		text-align: center;
		padding: 10rpx 15rpx;
	}
	.list-bottom {
		margin-top: 30rpx;
		flex-wrap: wrap;
	}
	.check-line {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 5rpx 0;
	}
	.switch {
		transform: scale(0.7);
	}
</style>
