<template><view></view></template>

<script>
	import { getPlayUrl, getLyric } from '@/common/online/getMusic.js'
	import { skinMixin } from '@/common/mixin/index.js'
	import musicMixin from '@/common/mixin/music.js'
	import musiccertifyMixin from '@/common/mixin/musiccertify.js'
	let audio = null;
	let musicBox = null;
	let musicControl = null;
	//点击延迟
	const delay = 200;
	const width = uni.upx2px(680);
	const height = uni.upx2px(120);
	const left = uni.upx2px((750 / 2) - (680 / 2));
	const bottom = uni.upx2px(30);
	const lineHeight = uni.upx2px(50);
	//控制栏图标size
	const iconSize = uni.upx2px(40);
	const iconGap = uni.upx2px(10);
	export default {
		mixins: [skinMixin, musicMixin, musiccertifyMixin],
		data () {
			return {
				//鼠标按下时间，避免移动时触发点击事件
				clickTime: 0,
				//控件移动的X轴距离
				pageX: 0,
				//控件移动的Y轴距离
				pageY: 0,
				//随机播放顺序
				randomIndex: [],
				//点击次数
				clickNum: 0,
				showBox: false,
				isClickHide: true//是否是用户手动点击隐藏
			}
		},
		computed: {
			//播放状态
			playStatus () {
				return this.getMusicPlayStatus;
			},
			//播放模式
			playMode () {
				return this.getMusicPlayMode;
			},
			//播放歌曲路径
			playRecord () {
				return this.getMusicPlayRecord;
			},
			//歌曲列表
			musicList () {
				return this.playList;
			},
			//是否显示歌词
			lyricShow () {
				return this.getMusicLyricShow;
			},
			//音乐时长
			musicDuration () {
				return this.getMusicPlayDuration;
			},
			//已播放时长
			playTime () {
				return this.getMusicPlayTime;
			}
		},
		beforeCreate () {
			uni.$on('musicBtn-hide', (data) => {
				this.btnHide();
			})
			uni.$on('musicBtn-show', (data) => {
				this.btnShow();
			})
			uni.$on('musicBtn-down', (data) => {
				if ( this.showBox ) {
					this.control()
				}
			})
			uni.$on('musicBtn-open', (data) => {
				if ( data == 'real' ) {
					this.btnShow();
				} else {
					if ( !this.showBox && !this.isClickHide ) {
						this.isClickHide = false;
						this.control()
					}
				}
			})
		},
		created() {
			this.init();
			// this.initMusic();
			this.getRandomIndex();
			//改变播放状态
			uni.$on('change-status', (data) => {
				this.changePlayStatus()
			})
			//改变播放状态
			uni.$on('change-music', (data) => {
				this.changeMusic(data.value);
			})
			//改变音乐播放位置
			uni.$on('update-time', (data) => {
				clearTimeout(this.seekTimer)
				this.seekTimer = setTimeout(() => {
					if ( audio ) {
						audio.seek(data.time);
						this.setMusicPlayTime(data.time);
					}
				}, 200)
			})
		},
		methods: {
			init () {
				musicControl = new plus.nativeObj.View('control',{
					bottom: -uni.upx2px(80) + 'px', left: left + 'px', width: height + 'px', height: height + 'px'
				});
				musicBox = new plus.nativeObj.View('box',{
					bottom: -(bottom + height) + 'px', left: left, width: width + 'px', height: height + 'px'
				});
				this.drawContent();
				musicControl.show();
				this.setControlTouch();
				musicBox.show();
				this.setBoxTouch();
			},
			setBoxTouch () {
				musicBox.addEventListener("click", (e) => {
					if ( !this.isAllowClick() ) {
						return;
					}
					const list = {
						left: uni.upx2px(35),
						right: uni.upx2px(35) + uni.upx2px(50),
						top: uni.upx2px(35),
						bottom: uni.upx2px(35) + uni.upx2px(50)
					}
					const next = {
						left: width - (iconSize + left),
						right: width - left,
						top: height - (uni.upx2px(15) + iconSize),
						bottom: height - uni.upx2px(15)
					}
					const play = {
						left: width - ((2 * iconSize) + iconGap + left),
						right: width - (iconSize + iconGap + left),
						top: height - (uni.upx2px(15) + iconSize),
						bottom: height - uni.upx2px(15)
					}
					const prev = {
						left: width - ((3 * iconSize) + (2 * iconGap) + left),
						right: width - ((2 * (iconSize + iconGap)) + left),
						top: height - (uni.upx2px(15) + iconSize),
						bottom: height - uni.upx2px(15)
					}
					if ( e.clientX >= list.left && e.clientX <= list.right && e.clientY >= list.top && e.clientY <= list.bottom ) {
						this.goPlayList();
					} else if ( e.clientX >= next.left && e.clientX <= next.right && e.clientY >= next.top && e.clientY <= next.bottom ) {
						this.changeMusic(1)
					} else if ( e.clientX >= play.left && e.clientX <= play.right && e.clientY >= play.top && e.clientY <= play.bottom ) {
						if ( this.playStatus ) { this.pause(); } else { this.play(); }
					} else if ( e.clientX >= prev.left && e.clientX <= prev.right && e.clientY >= prev.top && e.clientY <= prev.bottom ) {
						this.changeMusic(-1)
					} else {
						getApp().globalData.$Router.push({
							animationType: 'fade-in',
							path: '/pages/music/player'
						})
					}
				});
			},
			setControlTouch () {
				musicControl.addEventListener("click", (e) => {
					if ( !this.isAllowClick() ) {
						return;
					}
					if ( this.showBox ) {
						this.isClickHide = true;
					} else {
						this.isClickHide = false;
					}
					this.control();
				});
			},
			control () {
				clearInterval(this.interval);
				if ( this.showBox ) {
					let boxBottom = bottom;
					let controlBottom = height + bottom - uni.upx2px(80);
					const hide = () => {
						this.interval = setTimeout(() => {
							boxBottom -= 5;
							controlBottom -= 5;
							if ( boxBottom < -(bottom + height) ) {
								boxBottom = -(bottom + height);
							}
							if ( controlBottom < -uni.upx2px(80) ) {
								controlBottom = -uni.upx2px(80);
							}
							musicBox.setStyle({bottom: boxBottom + 'px'});
							musicControl.setStyle({bottom: controlBottom + 'px'});
							if ( boxBottom == -(bottom + height) && controlBottom == -uni.upx2px(80) ) {
								clearInterval(this.interval);
								this.showBox = false;
								musicControl.draw([{
									tag:'font',
									id:'music-arrow',
									text: '↑',
									position: {
										top: uni.upx2px(5) + 'px'
									},
									textStyles: {
										size: uni.upx2px(30) + 'px',
										color: this.skinColor.iconColor,
										verticalAlign: 'top',
										weight: 'bold',
										align: 'center'
									}
								}])
							} else {
								hide();
							}
						}, 5)
					}
					hide();
				} else {
					let boxBottom = -(bottom + height);
					let controlBottom = -uni.upx2px(80);
					const show = () => {
						this.interval = setTimeout(() => {
							boxBottom += 5;
							controlBottom += 5;
							if ( boxBottom > bottom ) {
								boxBottom = bottom;
							}
							if ( controlBottom > height + bottom - uni.upx2px(80) ) {
								controlBottom = height + bottom - uni.upx2px(80);
							}
							musicBox.setStyle({bottom: boxBottom + 'px'});
							musicControl.setStyle({bottom: controlBottom + 'px'});
							if ( boxBottom == bottom && controlBottom == height + bottom - uni.upx2px(80) ) {
								clearInterval(this.interval);
								this.showBox = true;
								musicControl.draw([{
									tag:'font',
									id:'music-arrow',
									text: '↓',
									position: {
										top: uni.upx2px(5) + 'px'
									},
									textStyles: {
										size: uni.upx2px(30) + 'px',
										color: this.skinColor.iconColor,
										verticalAlign: 'top',
										weight: 'bold',
										align: 'center'
									}
								}])
							} else {
								show();
							}
						}, 5)
					}
					show();
				}
			},
			drawContent () {
				musicBox.draw([{
					tag:'rect', id:'bg', rectStyles: {color: this.skinColor.bgColor, radius: '8px', borderColor: this.skinColor.gapColor, borderWidth: '1px'}, position:{top:'0', left: '0', width:'100%',height: '100%'}
				},{
			 		tag:'img',
					id:'music-next',
					src: '/static/music/next.png',
					position:{
						bottom: uni.upx2px(15) + 'px',
						right: 0,
						width: iconSize + 'px',
						height: iconSize + 'px',
					}
			 	},{
			 		tag:'img',
					id:'music-play',
					src: '/static/music/play.png',
					position:{
						bottom: uni.upx2px(15) + 'px',
						right: (iconSize + iconGap) + 'px',
						width: iconSize + 'px',
						height: iconSize + 'px',
					}
			 	},{
			 		tag:'img',
					id:'music-prev',
					src: '/static/music/prev.png',
					position:{
						bottom:uni.upx2px(15) + 'px',
						right: (2 * (iconSize + iconGap)) + 'px',
						width: iconSize + 'px',
						height: iconSize + 'px',
					}
			 	}])
				this.drawCover();
				this.drawMusicInfo();
				this.drawProgress();
				musicControl.draw([{
					tag:'rect', id:'bg', rectStyles: {color: this.skinColor.navColor, radius: height + 'px', borderColor: this.skinColor.gapColor, borderWidth: '1px'}, position:{top:'0', left: '0', width:'100%',height: '100%'}
				},{
					tag:'font',
					id:'music-arrow',
					text: '↑',
					position: {
						top: uni.upx2px(5) + 'px'
					},
					textStyles: {
						size: uni.upx2px(30) + 'px',
						color: this.skinColor.iconColor,
						verticalAlign: 'top',
						weight: 'bold',
						align: 'center'
					}
				}])
			},
			changeStatusIcon () {
				let playImg = this.playStatus ? '/static/music/pause.png' : '/static/music/play.png';
				musicBox.draw([{
			 		tag:'img',
					id:'music-play',
					src: playImg,
					position:{
						bottom: uni.upx2px(15) + 'px',
						right: (iconSize + iconGap) + 'px',
						width: iconSize + 'px',
						height: iconSize + 'px',
					}
			 	}])
			},
			drawCover () {
				let bg = this.musicInfo?.image || '/static/music/music-bg.jpg';
				musicBox.draw([{
			 		tag:'img', id:'music-img', src: bg, position:{top:'0.5%', left: '0', width: height + 'px', height: '99%'}
			 	},{
			 		tag:'img',
					id:'music-list',
					src: '/static/music/music-list.png',
					position:{
						top: uni.upx2px(35) + 'px',
						left: uni.upx2px(35) + 'px',
						width: uni.upx2px(50) + 'px',
						height: uni.upx2px(50) + 'px',
					}
			 	},{
					tag:'rect', id:'music-mask', rectStyles: {color: 'rgba(0,0,0,0.2)', radius: height + 'px'}, position:{top:0, left: 0, width: height + 'px',height: height + 'px'}
				},{
			 		tag:'img', id:'music-border', src: '/static/music/border-' + this.skinMode + '.png', position:{top:'0.5%', left: '0', width: height + 'px', height: '99%'}
			 	}])
			},
			drawProgress () {
				musicBox.draw([{
			 		tag:'font',
					id:'music-progress',
					text: `${getApp().globalData.$utils.minutesFormat(this.playTime)} / ${getApp().globalData.$utils.minutesFormat(this.musicDuration)}`,
					position: {
						top: uni.upx2px(26) + 'px',
						right: uni.upx2px(5) + 'px',
					},
					textStyles: {
						size: uni.upx2px(20) + 'px',
						color: this.skinColor.menuTitleColor,
						verticalAlign: 'top',
						align: 'right'
					}
			 	}])
			},
			drawMusicInfo () {
				musicBox.draw([{
			 		tag:'font',
					id:'music-name',
					text: this.musicInfo?.name || '暂无歌名',
					position: {
						top: uni.upx2px(20) + 'px',
						left: (height + uni.upx2px(20)) + 'px',
						width: '50%',
					},
					textStyles: {
						size: uni.upx2px(28) + 'px',
						color: this.skinColor.menuTitleColor,
						verticalAlign: 'top',
						align: 'left',
						weight: 'bold',
						overflow: 'ellipsis'
					}
			 	},{
			 		tag:'font',
					id:'singer-name',
					text: this.musicInfo?.singer || '未知歌手',
					position: {
						top: uni.upx2px(75) + 'px',
						left: (height + uni.upx2px(20)) + 'px',
						width: '35%',
					},
					textStyles: {
						size: uni.upx2px(20) + 'px',
						color: this.skinColor.menuTitleColor,
						verticalAlign: 'top',
						align: 'left',
						overflow: 'ellipsis'
					}
			 	}])
			},
			//改变播放模式
			// changeMode () {
			// 	switch(this.playMode) {
			// 	    case 'loop':
			// 	        this.changeMusicPlayMode('once');
			// 	        break;
			// 	    case 'once':
			// 	        this.changeMusicPlayMode('random');
			// 	        break;
			// 	    default:
			// 	        this.changeMusicPlayMode('loop');
			// 	}
			// },
			// //改变播放模式图标
			// chageModeIcon () {
			// 	let loopImage = '/static/music/' + this.playMode  + '.png';
			// 	musicLine.draw([{
			// 		tag:'img', id:'loop', src: loopImage, position:{top:'auto', left: height + (4 * iconGap) + (3 * iconSize) + 'px', width: iconSize + 'px',height: iconSize + 'px'}
			// 	}])
			// },
			goPlayList () {
				let size = plus.screen.getCurrentSize();
				//如果是横屏不能打开，因为横屏可能会打不开，不知道是不是官方的bug
				if ( size.width > size.height ) {
					uni.showToast({
						title: '横屏状态下不能打开播放列表页面',
						icon: 'none'
					})
					return;
				}
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				if ( page.$page.path == '/pages/music/index' ) {
					getApp().globalData.$Router.back()
					return;
				}
				getApp().globalData.$Router.push({
					path: '/pages/music/index',
					animationType: 'fade-in'
				});
			},
			changeLyricShow () {
				this.setMusicLyricShow(!this.lyricShow)
			},
			//更换音乐
			upMusicSrc () {
				if ( audio ) {
					audio.destroy();
					audio = null;
				}
				this.setMusicPlayStatus(false);
				clearTimeout(this.musicTimer);
				this.musicTimer = setTimeout(() => {
					this.initMusic().then(() => {
						setTimeout(() => {
							if ( audio.src ) {
								audio.play();
								this.setMusicPlayStatus(true);
							}
						}, 100)
					});
				}, 300)
			},
			//初始化音乐实例
			initMusic () {
				return Promise.resolve()
				    .then(() => {
						return new Promise( async (resolve, reject) => {
							audio = uni.createInnerAudioContext();
							if ( !this.playRecord ) {
								this.updateMusicPlayRecord(this.playList[0].path);
								return;
							}
							let nowIndex = getApp().globalData.$utils.indexOf(this.playList, 'path', this.playRecord);
							let src = '';
							let lyric = '';
							if ( this.playList[nowIndex].source == 'local' ) {
								src = this.playRecord ? 'file://' + this.playRecord : '';
							} else {
								src = await this._getPlayUrl(this.playList[nowIndex]);
							}
							if ( !src ) {
								getApp().globalData.message('操作提示', '获取播放链接失败，是否播放下一首？').then((res) => {
									if ( res == 'confirm' ) {
										this.changeMusic(1);
									}
								});
								return;
							}
							if ( src ) {
								this.setMusicInfo(this.playList[nowIndex]);
								this.drawCover();
								this.drawMusicInfo();
								audio.src = src
								audio.volume = 1;
								audio.onCanplay(() => {
									this.setMusicPlayDuration(audio.duration || 0);
									this.drawProgress();
								})
								audio.onPlay(() => {
									this.setMusicPlayStatus(true);
								});
								audio.onPause(() => {
									this.setMusicPlayStatus(false);
								});
								audio.onError(() => {
									this.setMusicPlayStatus(false);
									uni.showToast({
										title: "播放错误!",
										icon: 'none'
									})
								});
								audio.onEnded(() => {
									this.changeMusic(1);
								});
								audio.onTimeUpdate(() => {
									if ( audio ) {
										this.setMusicPlayTime(audio.currentTime || 0);
										this.drawProgress();
									}
								})
								resolve('')
							}
							if ( this.playList[nowIndex].lyric && src ) {
								lyric = await this.getPlayLyric(this.playList[nowIndex]);
							}
							this.setMusicLyric(lyric);
						})
				    })
				    .catch(err => {
				        console.log('[catch]', err);
				    })
			},
			//获取在线音乐播放链接
			_getPlayUrl (data) {
				return new Promise((resolve, reject) => {
					getPlayUrl(data).then((res) => {
						resolve(res.data.src);
					}).catch((err) => {
						resolve('');
					})
				})
			},
			//获取在线音乐歌词
			getPlayLyric (data) {
				return new Promise((resolve, reject) => {
					getLyric(data).then((res) => {
						resolve(res.data.lyric);
					}).catch((err) => {
						resolve('');
					})
				})
			},
			//改变播放状态
			changePlayStatus () {
				if ( audio ) {
					if ( !audio.paused ) {
						this.pause();
						return false;
					}
				}
				this.play();
			},
			//播放
			play () {
				if ( audio ) {
					if ( audio.src && audio.paused ) {
						audio.play();
						return false;
					}
				}
				if ( this.playList.length > 0 ) {
					this.upMusicSrc();
				} else {
					uni.showToast({
						icon: 'none',
						title: '播放列表为空!'
					})
				}
			},
			//暂停
			pause () {
				if ( !audio.paused && audio.src ) {
					audio.pause();
				}
			},
			//上一曲 / 下一曲
			changeMusic (value) {
				if ( this.playList.length <= 0 ) {
					uni.showToast({
						icon: 'none',
						title: '播放列表为空!'
					})
					return;
				}
				if ( this.playList.length == 1 ) {
					this.upMusicSrc();
					return;
				}
				let index = getApp().globalData.$utils.indexOf(this.playList, 'path', this.playRecord);
				switch (this.playMode) {
					case 'once':
						this.upMusicSrc();
						break;
					case 'loop':
						let musicIndex = index + value >= this.playList.length ? 0 : index + value < 0 ? this.playList.length - 1 : index + value;
						this.updateMusicPlayRecord(this.playList[musicIndex].path);
						break;
					default:
						let random = this.randomIndex.indexOf(index);
						if ( random > -1 ) {
							let musicIndex = random + value >= this.randomIndex.length ? 0 : random + value < 0 ? this.randomIndex.length - 1 : random + value;
							this.updateMusicPlayRecord(this.playList[this.randomIndex[musicIndex]].path);
						}
						break;
				}
			},
			//获取随机播放顺序
			getRandomIndex () {
				if ( this.playMode == 'random' ) {
					this.randomIndex = getApp().globalData.$utils.randomSoleNumber(this.playList.length);
				}
			},
			btnHide () {
				musicBox.hide();
				musicControl.hide();
			},
			btnShow () {
				if ( !this.isPlayer() ) {
					musicBox.show();
					musicControl.show();
				}
			},
			//判断播放页面是否打开
			isPlayer () {
				const pages = getCurrentPages();
				const nowPage = pages[pages.length - 1];
				if ( nowPage.$page.path == '/pages/music/player' ) {
					return true;
				}
				for ( let i in pages ) {
					if ( pages[i].$page.path == '/pages/music/player' ) {
						return true;
					}
				}
				return false;
			},
			//是否允许点击
			isAllowClick () {
				const routes = ['pages/music/player']
				if ( getApp().globalData.$Route.meta.path.indexOf('modules') > -1 ) {
					return false;
				}
				if ( routes.indexOf(getApp().globalData.$Route.meta.path) > -1 ) {
					return false;
				}
				return true
			}
		},
		watch: {
			skinMode () {
				this.drawContent();
			},
			playStatus () {
				this.changeStatusIcon();
			},
			playMode (val) {
				this.getRandomIndex();
				this.chageModeIcon();
			},
			playRecord (val) {
				this.upMusicSrc();
			},
			musicList (val) {
				this.getRandomIndex();
				//音乐在播放途中被删掉
				if ( this.playRecord && getApp().globalData.$utils.indexOf(val, 'path', this.playRecord) == -1 ) {
					if ( val.length > 0 ) {
						this.updateMusicPlayRecord(this.playList[0].path);
					} else {
						this.updateMusicPlayRecord('');
						this.setMusicPlayTime(0);
						this.setMusicPlayDuration(0);
						this.drawProgress();
					}
				} 
			}
		},
		beforeDestroy() {
			musicBox.close();
			musicControl.close();
			if ( audio ) {
				audio.destroy();
			}
			uni.$off('update-time');
			uni.$off('change-status');
			uni.$off('musicBtn-show');
			uni.$off('musicBtn-hide');
			uni.$off('musicBtn-open');
			uni.$off('musicBtn-down');
			uni.$off('change-music');
		}
	}
</script>

<style>
</style>
