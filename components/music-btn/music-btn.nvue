<template><view></view></template>

<script>
	import { mapGetters, mapMutations } from 'vuex';
	import { indexOf, randomSoleNumber } from '@/common/js/util.js'
	import { getPlayUrl, getLyric } from '@/common/online/getMusic.js'
	import { skinMixin } from '@/common/mixin/index.js'
	let audio = null;
	let musicBox = null;
	let musicLine = null;
	//点击延迟
	const delay = 200;
	//控件高度 （高度和宽度一样）
	const height = uni.upx2px(90);;
	//控制栏宽度
	const width = uni.upx2px(615);
	//控制栏图标size
	const iconSize = uni.upx2px(55);
	const fontSize = uni.upx2px(40);
	const iconGap = uni.upx2px(30);
	export default {
		mixins: [skinMixin],
		data () {
			return {
				windowWidth: 0,
				windowHeight: 0,
				lineWidth: 0,
				//鼠标按下时间，避免移动时触发点击事件
				clickTime: 0,
				//控件移动的X轴距离
				pageX: 0,
				//控件移动的Y轴距离
				pageY: 0,
				//随机播放顺序
				randomIndex: [],
				//点击次数
				clickNum: 0
			}
		},
		computed: {
			...mapGetters(['playList', 'getMusicPlayStatus', 'getMusicPlayMode', 'getMusicPlayRecord', 'getMusicLyricShow']),
			//播放状态
			playStatus () {
				return this.getMusicPlayStatus;
			},
			//播放模式
			playMode () {
				return this.getMusicPlayMode;
			},
			//播放歌曲路径
			playRecord () {
				return this.getMusicPlayRecord;
			},
			//歌曲列表
			musicList () {
				return this.playList;
			},
			//是否显示歌词
			lyricShow () {
				return this.getMusicLyricShow;
			}
		},
		beforeCreate () {
			uni.$on('musicBtn-hide', (data) => {
				this.btnHide()
			})
			uni.$on('musicBtn-show', (data) => {
				this.btnShow()
			})
		},
		created() {
			this.init();
			// this.initMusic();
			this.getRandomIndex();
			uni.getSystemInfo({
				success: (res) => {
					this.windowWidth = res.safeArea.width;
					this.windowHeight = res.safeArea.height;
				}
			})
			//监听窗口尺寸变化
			uni.onWindowResize(() => {
				uni.getSystemInfo({
					success: (res) => {
						this.windowWidth = res.safeArea.width;
						this.windowHeight = res.safeArea.height;
					}
				})
			})
			//改变播放状态
			uni.$on('change-status', (data) => {
				this.changePlayStatus()
			})
			//改变播放状态
			uni.$on('change-music', (data) => {
				this.changeMusic(data.value);
			})
			//改变音乐播放位置
			uni.$on('update-time', (data) => {
				clearTimeout(this.seekTimer)
				this.seekTimer = setTimeout(() => {
					if ( audio ) {
						audio.seek(data.time);
						this.changeMusicPlayTime(data.time);
					}
				}, 200)
			})
		},
		methods: {
			...mapMutations(['changeMusicPlayStatus', 'changeMusicPlayMode', 'updateMusicPlayRecord', 'changeMusicPlayTime', 'changeMusicPlayDuration', 'setMusicLyric', 'setMusicLyricShow']),
			init () {
				musicLine = new plus.nativeObj.View('line',{
					top:'90%',left:'0',height: height + 'px', width: '0'
				})
				musicLine.show();
				this.drawContorlLine();
				musicBox = new plus.nativeObj.View('box',{
					top:'90%',left:'0', width: height + 'px', height: height + 'px'
				},[{
					tag:'img', id:'icon', src: '/static/music/music-icon.png', position:{top:'0', left: '0', width:'100%',height: '100%'}
				}]);
				musicBox.show();
				//用触摸来模拟点击事件
				musicBox.addEventListener("touchstart", (e) => {
					this.clickTime = 0;
					this.clickNum += 1;
					clearTimeout(this.startTimer);
					this.startTimer = setTimeout(() => {
						this.clickTime = delay;
					}, delay)
				})
				musicBox.addEventListener("touchend", (e) => {
					clearTimeout(this.startTimer);
					clearTimeout(this.endTimer);
					if ( this.clickTime >= delay ) {
						this.clickNum = 0;
						return;
					}
					//单击事件, 延后200ms执行判断此次是否是双击事件
					this.endTimer = setTimeout(() => {
						this.clickNum = 0;
						if ( this.lineWidth == 0 ) {
							this.open();
						} else {
							this.hide();
						}
					}, delay)
					if ( this.clickNum >= 2 ) {
						this.clickNum = 0;
						clearTimeout(this.endTimer);
						getApp().globalData.routePush('/pages/music/player', 'fade-in');
					}
				})
				musicBox.addEventListener("touchmove", (e) => {
					if ( this.clickTime < delay ) {
						return;
					}
					this.pageX = e.pageX - (height / 2);
					this.pageY = e.pageY - (height / 2);
					let lineLeft = 0;
					//限制滑动距离不能超过屏幕左边10px
					if ( this.pageX < 0 ) {
						this.pageX = 0
					}
					//限制滑动距离不能超过屏幕右边10px
					if ( this.pageX> this.windowWidth - height ) {
						this.pageX = this.windowWidth - height;
					}
					//判断控件处于屏幕右边时，改变控制栏的方向向左
					if ( this.pageX > this.windowWidth - this.pageX) {
						lineLeft = this.pageX - this.lineWidth + height;
					} else {
						//判断控件处于屏幕左边时，改变控制栏的方向向右
						lineLeft = this.pageX;
					}
					//限制滑动距离不能超过屏幕顶部
					if ( this.pageY < 0 ) {
						this.pageY = 0
					}
					//限制滑动距离不能超过屏幕底部
					if ( this.pageY > this.windowHeight - height ) {
						this.pageY = this.windowHeight - height
					}
					
					musicBox.setStyle({top: this.pageY + 'px', left: this.pageX + 'px'});
					musicLine.setStyle({top: this.pageY + 'px', left: lineLeft + 'px'});
				})
			},
			open () {
				clearInterval(this.timer);
				this.timer = setInterval(() => {
					this.lineWidth += 40;
					if ( this.lineWidth > width ) {
						this.lineWidth = width;
					}
					this.setLineStyle();
				}, 10)
			},
			hide () {
				clearInterval(this.timer);
				this.timer = setInterval(() => {
					this.lineWidth -= 40;
					if ( this.lineWidth < 0 ) {
						this.lineWidth = 0;
					}
					this.setLineStyle();
				}, 10)
			},
			setLineStyle () {
				//判断控件处于屏幕右边时，改变控制栏的方向向左
				if ( this.pageX > this.windowWidth - this.pageX ) {
					musicLine.setStyle({width:this.lineWidth + 'px', left: this.pageX - this.lineWidth + height + 'px'});
				} else {
					//判断控件处于屏幕左边时，改变控制栏的方向向右
					musicLine.setStyle({width:this.lineWidth + 'px'});
				}
				if ( this.lineWidth <= 0 ) {
					clearInterval(this.timer);
				}
			},
			changeLineBgColor () {
				musicLine.draw([{
					tag:'rect', id:'line', color: this.skinColor.bgColor, rectStyles: {radius: height + 'px', borderWidth: '1px', borderColor: this.skinColor.menuTitleColor}, position:{top:'0px',left:'0px',width:'100%',height:'100%'}
				}])
			},
			changeStatusIcon () {
				let playImg = this.playStatus ? '/static/music/pause.png' : '/static/music/play.png';
				musicLine.draw([{
					tag:'img', id:'play', src: playImg, position:{top:'auto', left: height + (2 * iconGap) + iconSize + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				}])
			},
			//改变播放模式
			changeMode () {
				switch(this.playMode) {
				    case 'loop':
				        this.changeMusicPlayMode('once');
				        break;
				    case 'once':
				        this.changeMusicPlayMode('random');
				        break;
				    default:
				        this.changeMusicPlayMode('loop');
				}
			},
			//改变播放模式图标
			chageModeIcon () {
				let loopImage = '/static/music/' + this.playMode  + '.png';
				musicLine.draw([{
					tag:'img', id:'loop', src: loopImage, position:{top:'auto', left: height + (4 * iconGap) + (3 * iconSize) + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				}])
			},
			//绘制控制栏内容
			drawContorlLine () {
				let loopImage = '/static/music/' + this.playMode  + '.png';
				musicLine.draw([{
					tag:'rect', id:'line', color: this.skinColor.bgColor, rectStyles: {radius: height + 'px', borderWidth: '1px', borderColor: this.skinColor.menuTitleColor}, position:{top:'0px',left:'0px',width:'100%',height:'100%'}
				},{
					tag:'img', id:'prev', src: '/static/music/prev.png', position:{top:'auto', left: height + iconGap + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				},{
					tag:'img', id:'play', src: '/static/music/play.png', position:{top:'auto', left: height + (2 * iconGap) + iconSize + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				},{
					tag:'img', id:'next', src: '/static/music/next.png', position:{top:'auto', left: height + (3 * iconGap) + (2 * iconSize) + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				},{
					tag:'img', id:'loop', src: loopImage, position:{top:'auto', left: height + (4 * iconGap) + (3 * iconSize) + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				},{
					tag:'font', id:'lyricShow', text: '词', textStyles: {size: fontSize + 'px', color: '#1296DB', verticalAlign: 'middle', weight: 'bold'}, position:{top:'auto', left: height + (5 * iconGap) + (4 * iconSize) + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				},{
					tag:'img', id:'listRight', src: '/static/music/music-list.png', position:{top:'auto', left: height + (6 * iconGap) + (5 * iconSize) + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				},{
					tag:'img', id:'listLeft', src: '/static/music/music-list.png', position:{top:'auto', left: iconGap + 'px', width: iconSize + 'px',height: iconSize + 'px'}
				}])
				this.setLineTouchRect();
			},
			//设置触摸位置 绑定点击事件
			setLineTouchRect () {
				let top = (height / 2) - (iconSize / 2);
				let bottom = top + iconSize;
				//上一曲
				let icon1 = {
					left: height + iconGap,
					right: height + iconGap + iconSize
				}
				//播放/暂停
				let icon2 = {
					left: height + (2 * iconGap) + iconSize,
					right: height + (2 * iconGap) + (2 * iconSize)
				}
				//下一曲
				let icon3 = {
					left: height + (3 * iconGap) + (2 * iconSize),
					right: height + (3 * iconGap) + (3 * iconSize)
				}
				//播放方式
				let icon4 = {
					left: height + (4 * iconGap) + (3 * iconSize),
					right: height + (4 * iconGap) + (4 * iconSize)
				}
				//歌词显示控制
				let icon5 = {
					left: height + (5 * iconGap) + (4 * iconSize),
					right: height + (5 * iconGap) + (5 * iconSize)
				}
				//音乐列表右
				let icon7 = {
					left: height + (6 * iconGap) + (5 * iconSize),
					right: height + (6 * iconGap) + (6 * iconSize)
				}//音乐列表左
				let icon6 = {
					left: iconGap,
					right: iconGap + iconSize
				}
				musicLine.addEventListener("click", (e) => {
					if ( e.clientY >= top && e.clientY <= bottom ) {
						if ( e.clientX >= icon1.left && e.clientX <= icon1.right ) {
							this.changeMusic(-1)
						} else if ( e.clientX >= icon2.left && e.clientX <= icon2.right ) {
							this.changePlayStatus();
						} else if ( e.clientX >= icon3.left && e.clientX <= icon3.right ) {
							this.changeMusic(1)
						} else if ( e.clientX >= icon4.left && e.clientX <= icon4.right ) {
							this.changeMode();
						} else if ( e.clientX >= icon5.left && e.clientX <= icon5.right ) {
							this.changeLyricShow()
						} else if ( e.clientX >= icon7.left && e.clientX <= icon7.right ) {
							this.goPlayList();
						} else if ( e.clientX >= icon6.left && e.clientX <= icon6.right ) {
							this.goPlayList();
						}
					}
				});
			},
			goPlayList () {
				let size = plus.screen.getCurrentSize();
				//如果是横屏不能打开，因为横屏可能会打不开，不知道是不是官方的bug
				if ( size.width > size.height ) {
					uni.showToast({
						title: '横屏状态下不能打开播放页面',
						icon: 'none'
					})
					return;
				}
				const pages = getCurrentPages();
				const page = pages[pages.length - 1];
				const lastPage = pages.length > 1 ? pages[pages.length - 2] : false;
				const url = '/pages/music/index';
				if ( page.$page.path == url ) {
					return
				}
				if ( lastPage ) {
					if ( lastPage.$page.path == url ) {
						return;
					}
				}
				getApp().globalData.routePush(url, 'fade-in');
			},
			changeLyricShow () {
				this.setMusicLyricShow(!this.lyricShow)
			},
			//更换音乐
			upMusicSrc () {
				if ( audio ) {
					audio.destroy();
					audio = null;
				}
				this.changeMusicPlayStatus(false);
				clearTimeout(this.musicTimer);
				this.musicTimer = setTimeout(() => {
					this.initMusic().then(() => {
						setTimeout(() => {
							if ( audio.src ) {
								audio.play();
								this.changeMusicPlayStatus(true);
							}
						}, 100)
					});
				}, 300)
			},
			//初始化音乐实例
			initMusic () {
				return Promise.resolve()
				    .then(() => {
						return new Promise( async (resolve, reject) => {
							audio = uni.createInnerAudioContext();
							if ( !this.playRecord ) {
								this.updateMusicPlayRecord(this.playList[0].path);
								return;
							}
							let nowIndex = indexOf(this.playList, this.playRecord, 'path');
							let src = '';
							let lyric = '';
							if ( this.playList[nowIndex].source == 'local' ) {
								src = this.playRecord ? 'file://' + this.playRecord : '';
							} else {
								src = await this._getPlayUrl(this.playList[nowIndex]);
							}
							if ( !src ) {
								getApp().globalData.message('操作提示', '获取播放链接失败，是否播放下一首？').then((res) => {
									if ( res == 'confirm' ) {
										this.changeMusic(1);
									}
								});
								return;
							}
							if ( src ) {
								audio.src = src
								audio.volume = 1;
								audio.onCanplay(() => {
									this.changeMusicPlayDuration(audio.duration || 0);
								})
								audio.onPlay(() => {
									this.changeMusicPlayStatus(true);
								});
								audio.onPause(() => {
									this.changeMusicPlayStatus(false);
								});
								audio.onError(() => {
									this.changeMusicPlayStatus(false);
									uni.showToast({
										title: "播放错误!",
										icon: 'none'
									})
								});
								audio.onEnded(() => {
									this.changeMusic(1);
								});
								audio.onTimeUpdate(() => {
									if ( audio ) {
										this.changeMusicPlayTime(audio.currentTime || 0);
									}
								})
								resolve('')
							}
							if ( this.playList[nowIndex].lyric && src ) {
								lyric = await this.getPlayLyric(this.playList[nowIndex]);
							}
							this.setMusicLyric(lyric);
						})
				    })
				    .catch(err => {
				        console.log('[catch]', err);
				    })
			},
			//获取在线音乐播放链接
			_getPlayUrl (data) {
				return new Promise((resolve, reject) => {
					getPlayUrl(data).then((res) => {
						resolve(res.data.src);
					}).catch((err) => {
						resolve('');
					})
				})
			},
			//获取在线音乐歌词
			getPlayLyric (data) {
				return new Promise((resolve, reject) => {
					getLyric(data).then((res) => {
						resolve(res.data.lyric);
					}).catch((err) => {
						resolve('');
					})
				})
			},
			//改变播放状态
			changePlayStatus () {
				if ( audio ) {
					if ( !audio.paused ) {
						this.pause();
						return false;
					}
				}
				this.play();
			},
			//播放
			play () {
				if ( audio ) {
					if ( audio.src && audio.paused ) {
						audio.play();
						return false;
					}
				}
				if ( this.playList.length > 0 ) {
					this.upMusicSrc();
				} else {
					uni.showToast({
						icon: 'none',
						title: '播放列表为空!'
					})
				}
			},
			//暂停
			pause () {
				if ( !audio.paused && audio.src ) {
					audio.pause();
				}
			},
			//上一曲 / 下一曲
			changeMusic (value) {
				if ( this.playList.length <= 0 ) {
					uni.showToast({
						icon: 'none',
						title: '播放列表为空!'
					})
					return;
				}
				if ( this.playList.length == 1 ) {
					this.upMusicSrc();
					return;
				}
				let index = indexOf(this.playList, this.playRecord, 'path');
				switch (this.playMode) {
					case 'once':
						this.upMusicSrc();
						break;
					case 'loop':
						let musicIndex = index + value >= this.playList.length ? 0 : index + value < 0 ? this.playList.length - 1 : index + value;
						this.updateMusicPlayRecord(this.playList[musicIndex].path);
						break;
					default:
						let random = this.randomIndex.indexOf(index);
						if ( random > -1 ) {
							let musicIndex = random + value >= this.randomIndex.length ? 0 : random + value < 0 ? this.randomIndex.length - 1 : random + value;
							this.updateMusicPlayRecord(this.playList[this.randomIndex[musicIndex]].path);
						}
						break;
				}
			},
			//获取随机播放顺序
			getRandomIndex () {
				if ( this.playMode == 'random' ) {
					this.randomIndex = randomSoleNumber(this.playList.length);
				}
			},
			btnHide () {
				musicBox.hide();
				musicLine.hide();
			},
			btnShow () {
				if ( !this.isPlayer() ) {
					musicBox.show();
					musicLine.show();
				}
			},
			//判断播放页面是否打开
			isPlayer () {
				const pages = getCurrentPages();
				const nowPage = pages[pages.length - 1];
				if ( nowPage.$page.path == '/pages/music/player' ) {
					return true;
				}
				for ( let i in pages ) {
					if ( pages[i].$page.path == '/pages/music/player' ) {
						return true;
					}
				}
				return false;
			}
		},
		watch: {
			skinMode () {
				this.changeLineBgColor();
			},
			playStatus () {
				this.changeStatusIcon();
			},
			playMode (val) {
				this.getRandomIndex();
				this.chageModeIcon();
			},
			playRecord (val) {
				this.upMusicSrc();
			},
			musicList (val) {
				this.getRandomIndex();
				//音乐在播放途中被删掉
				if ( this.playRecord && indexOf(val, this.playRecord, 'path') == -1 ) {
					if ( val.length > 0 ) {
						this.updateMusicPlayRecord(this.playList[0].path);
					} else {
						this.updateMusicPlayRecord('');
						this.changeMusicPlayTime(0);
						this.changeMusicPlayDuration(0);
					}
				} 
			}
		},
		beforeDestroy() {
			musicBox.close();
			musicLine.close();
			if ( audio ) {
				audio.destroy();
			}
			uni.$off('update-time');
			uni.$off('change-status');
			uni.$off('musicBtn-show');
			uni.$off('musicBtn-hide');
			uni.$off('change-music');
		}
	}
</script>

<style>
</style>
