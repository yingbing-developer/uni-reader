<template>
	<view class="c-image">
		<image @load="load" @error="error" ref="image"
			class="c-img" :lazyLoad="lazyLoad" :src="url" :mode="mode"
			:style="{borderRadius: borderRadius + 'rpx'}"></image>
		<view class="img-mask" :style="{opacity: maskOpac, borderRadius: borderRadius + 'rpx'}"
			v-if="enableMask"></view>
		<view class="longpress" @longpress="preview" @tap="onTap" v-if="enablePreview || enableClick"></view>
		<view class="error" v-if="isError">
			<text class="error-text"
				:style="{'font-size': errorSize + 'rpx', color: skinColor.color_1}">加载失败!</text>
		</view>
	</view>
</template>

<script>
	import appMixin from '@/common/mixin/app.js'
	import cacheMixin from '@/common/mixin/cache.js'
	import CIcon from '@/components/c-icon/c-icon.nvue'
	import {
		base64ToPath
	} from '@/js_sdk/mmmm-image-tools/index.js'
	const main = plus.android.runtimeMainActivity();
	const Intent = plus.android.importClass("android.content.Intent");
	const Uri = plus.android.importClass("android.net.Uri");
	export default {
		mixins: [appMixin, cacheMixin],
		props: {
			//图片链接
			src: {
				type: String,
				default: ''
			},
			//裁剪模式
			mode: {
				type: String,
				default: ''
			},
			//懒加载
			lazyLoad: {
				type: Boolean,
				default: false
			},
			//是否打开夜间模式遮罩层
			enableMask: {
				type: Boolean,
				default: true
			},
			resize: {
				type: String,
				default: 'cover'
			},
			//屏幕宽度用于计算高度
			windowWidth: {
				type: Number,
				default: 0
			},
			//圆角大小
			borderRadius: {
				type: Number,
				default: 0
			},
			//图片加载失败展示的默认图片
			defaultSrc: {
				type: String,
				default: ''
			},
			//开启高斯模糊
			enableBlur: {
				type: Boolean,
				default: false
			},
			//高斯模糊配置
			blur: {
				type: Object,
				default () {
					return {
						scale: 0.5,//尺寸比例
						radius: 10//半径
					}
				}
			},
			errorSize: {
				type: String | Number,
				default: 22
			},
			//开启防盗链处理
			enableReferer: {
				type: Boolean,
				default: false
			},
			//开启预览图片
			enablePreview: {
				type: Boolean,
				default: false
			},
			//开启点击事件
			enableClick: {
				type: Boolean,
				default: false
			}
		},
		computed: {
			imageHeight() {
				return (this.windowWidth / this.width * this.height) > 0 ? this.windowWidth / this.width * this.height :
					400
			},
			maskOpac () {
				return this.skinMode == 'night' ? 0.2 : 0
			}
		},
		data() {
			return {
				url: '',
				width: 0,
				height: 0,
				isError: false
			}
		},
		created() {
			if (this.src) {
				this.selectCache()
			}
		},
		watch: {
			src(newVal) {
				this.selectCache()
			},
			isError(newVal) {
				if (newVal && this.defaultSrc) {
					this.url = this.defaultSrc;
					this.isError = false;
				}
			}
		},
		methods: {
			onTap () {
				if ( this.enableClick ) {
					this.$emit('click')
				}
			},
			async selectCache () {
				const caches = this.imageCache;
				if ( this.src.indexOf('http') > -1 ) {
					const url = this.src + (this.enableBlur ? '_blur' : this.enableReferer ? '_base' : '')
					const index = caches.findIndex(cache => cache.key == url)
					if ( index > -1 ) {
						const path = plus.io.convertLocalFileSystemURL(caches[index].path);
						const file = plus.android.newObject('java.io.File', path);
						if ( plus.android.invoke(file, 'exists') ) {
							this.url = caches[index].path
							return
						} else {
							this.removeImageCache(url)
						}
					}
					let path = ''
					if ( this.enableReferer ) {
						path = await this.baseImage(this.src)
					}
					if ( this.enableBlur ) {
						path = path ? await this.blurImage(path) : await this.blurImage(this.src)
					}
					this.url = path ? path : this.src;
				} else {
					this.url = this.src;
				}
			},
			blurImage (src) {
				return new Promise(resolve => {
					const url = src.indexOf('http') > -1 ? encodeURI(src) : plus.io.convertLocalFileSystemURL(src)
					const BlurImage = uni.requireNativePlugin('YingBingNativePlugin-BlurImage');
					const base64 = BlurImage.blur(url, this.blur.scale, this.blur.radius) || null;
					if ( base64 ) {
						base64ToPath(base64)
							.then(path => {
								this.addImageCache({
									key: this.src + '_blur',
									path: path
								})
								resolve(path)
							})
							.catch(error => {
								resolve(false)
							})
					} else {
						resolve(false)
					}
				})
			},
			baseImage(e) {
				return new Promise(resolve => {
					const BaseImage = uni.requireNativePlugin('YingBingNativePlugin-BaseImage');
					const base64 = BaseImage ? BaseImage.getImgStr(encodeURI(this.url)) : null;
					if (base64) {
						base64ToPath(base64)
							.then(path => {
								this.addImageCache({
									key: this.src + '_base',
									path: path
								})
								resolve(path)
							})
							.catch(error => {
								resolve(false)
							})
					} else {
						resolve(false)
					}
				})
			},
			load(e) {
				this.isError = false;
				this.$emit('load', e);
			},
			error(e) {
				this.$emit('error', e);
			},
			//预览图片
			preview() {
				if (!this.enablePreview && this.isError) {
					return;
				}
				uni.previewImage({
					current: 0,
					urls: [this.url],
					longPressActions: {
						itemList: ['分享', '保存相册'],
						success: (data) => {
							//选择分享
							if (data.tapIndex == 0) {
								this.shareImage(this.url, data.tapIndex);
							}
							//保存图片
							if (data.tapIndex == 1) {
								this.saveImage(this.url, data.tapIndex);
							}
						},
						fail: function(err) {
							console.log(err.errMsg);
						}
					}
				});
			},
			//分享图片
			shareImage(url, flag) {
				if (url.indexOf('http') == -1) {
					//本地图片直接分享
					this.intentImage(url);
				} else {
					//网络图片先下载
					this.downloadImage(url, flag);
				}
			},
			//分享图片
			intentImage(path) {
				let shareIntent = new Intent(Intent.ACTION_SEND);
				let filePath = plus.io.convertLocalFileSystemURL(path);
				let file = plus.android.newObject("java.io.File", filePath);
				shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));
				shareIntent.setType("image/*"); //此处可发送image图片
				main.startActivity(Intent.createChooser(shareIntent, "分享图片"));
			},
			//保存图片
			saveImage(url, flag) {
				if (url.indexOf('http') == -1) {
					//本地图片直接保存
					this.photoImage(url);
				} else {
					//网络图片先下载
					this.downloadImage(url, flag);
				}
			},
			//将图片保存到相册
			photoImage(path) {
				uni.saveImageToPhotosAlbum({
					filePath: path,
					success: function() {
						uni.showToast({
							title: '保存成功'
						})
					},
					fail: function() {
						uni.showToast({
							title: '保存失败',
							icon: 'none'
						})
					}
				});
			},
			//下载图片
			downloadImage(url, flag) {
				uni.showLoading({
					title: '图片下载中',
					icon: 'none'
				})
				//网络图片先下载
				uni.downloadFile({
					url,
					success: (res) => {
						uni.hideLoading();
						if (res.statusCode === 200) {
							if (flag == 0) {
								this.intentImage(res.tempFilePath);
							}
							if (flag == 1) {
								this.photoImage(res.tempFilePath);
							}
						} else {
							uni.showToast({
								title: '图片下载失败',
								icon: 'none'
							})
						}
					},
					fail: (err) => {
						uni.hideLoading();
						uni.showToast({
							title: '网络错误',
							icon: 'none'
						})
					}
				});
			}
		},
		beforeDestroy() {
			clearTimeout(this.timer);
		},
		components: {
			CIcon
		}
	}
</script>

<style scoped>
	.c-image {
		position: relative;
	}

	.c-img {
		flex: 1;
	}

	.longpress {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}

	.img-mask {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #000000;
	}

	.error {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		align-items: center;
		justify-content: center;
	}
</style>
